{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Git-versionhallinta -opintojakso","text":"<p>T\u00e4ll\u00e4 opintojaksolla tutustut Git-versionhallintaj\u00e4rjestelm\u00e4n ja GitHub-palvelun k\u00e4ytt\u00e4miseen sek\u00e4 yksitt\u00e4isen ohjelmoijan ett\u00e4 tiimin n\u00e4k\u00f6kulmasta. </p>"},{"location":"#osaamistavoitteet","title":"Osaamistavoitteet","text":"<p>Versionhallinta on yksi ohjelmistoty\u00f6n keskeisi\u00e4 ty\u00f6kaluja. Se mahdollistaa ohjelmiston aikaisempien versioiden palauttamisen, ohjelmiston useiden eri versioiden yht\u00e4aikaisen kehitt\u00e4misen ja useiden kehitt\u00e4jien osallistumisen kehitykseen yhtaikaa. </p> <p>Opintojakson suoritettuaan opiskelija</p> <ul> <li>tuntee git-versionhallintaj\u00e4rjestelm\u00e4n perusk\u00e4sitteet</li> <li>osaa k\u00e4ytt\u00e4\u00e4 git-versionhallintaj\u00e4restelm\u00e4n yleisimpi\u00e4 toimintoja</li> <li>osaa k\u00e4ytt\u00e4\u00e4 git-hosting-palveluita</li> <li>osaa soveltaa versiohaaroja omassa ja tiimins\u00e4 kehitysty\u00f6ss\u00e4</li> </ul> <p>Sis\u00e4lt\u00f6</p> <ul> <li>Mit\u00e4 on versionhallinta, mik\u00e4 on git</li> <li>K\u00e4ytt\u00f6\u00f6notto</li> <li>Perusk\u00e4ytt\u00f6</li> <li>Et\u00e4-repositoryjen k\u00e4ytt\u00f6 ja hosting-palvelut</li> <li>Haarat ja niiden k\u00e4ytt\u00f6 projektissa</li> <li>Muita git-toimintoja</li> </ul>"},{"location":"#materiaali","title":"Materiaali","text":"<p>Git-versionhallinnasta on paljon ohjeita, tutoriaaleja ja ohjevideoita saatavana verkossa. Kurssimateriaali perustuu pitk\u00e4lti Scott Chaconin ja Ben Straubin kirjaan Pro Git (Chacon, Straub. 2014. Pro Git, 2nd edition. Apress. Berkeley). </p> <p>Kirja on vapaasti saatavana verkosta osoitteesta https://git-scm.com/book/en/v2.</p>"},{"location":"#harjoitukset","title":"Harjoitukset","text":"<p>Versionhallintaa on vaikea ymm\u00e4rt\u00e4\u00e4 ja oppia lukemalla. T\u00e4ll\u00e4 kurssilla oleellista onkin omakohtainen harjoittelu ja kokeilu. Materiaalissa esitettyj\u00e4 komentoja kannattaakin aina kokeilla itse.</p> <p>Kaikki teht\u00e4v\u00e4t tehd\u00e4\u00e4n Git-versionhallintaa k\u00e4ytt\u00e4en. Kurssin suoritukseen vaadittavat teht\u00e4v\u00e4t on merkitty materiaaliin otsikolla Harjoitus. Harjoitukset rakentuvat toisilleen, joten ne on teht\u00e4v\u00e4 materiaalin mukaisessa j\u00e4rjestyksess\u00e4.</p> <p>Lis\u00e4ksi kurssilla laaditaan oppimisp\u00e4iv\u00e4kirja. </p> <p>Kurssin teht\u00e4v\u00e4nannot ja teht\u00e4vien palautusohjeet l\u00f6ytyv\u00e4t Moodle-ty\u00f6tilasta.</p>"},{"location":"#harjoituksissa-tarvittavat-tyokalut","title":"Harjoituksissa tarvittavat ty\u00f6kalut","text":"<p>Git-ohjelmisto on oltava asennettuna jokaisella tietokoneella, jolla sit\u00e4 halutaan k\u00e4ytt\u00e4\u00e4. Voit ladata asennuspaketin osoitteesta https://git-scm.com/downloads</p> <p>Kurssin teht\u00e4vien tekemiseen tarvitaan ohjelmointieditori. Editoriksi suositellaan Visual Studio Codea. Sen voit ladata osoitteesta https://code.visualstudio.com/download. Voit halutessasi k\u00e4ytt\u00e4\u00e4 my\u00f6s mit\u00e4 tahansa muuta ohjelmoitieditoria.</p> <p>Kurssilla teht\u00e4v\u00e4t teht\u00e4v\u00e4t talletetaan GitHub-palveluun ja palautetaan sen kautta. Palvelun k\u00e4ytt\u00e4miseksi on luotava palveluun tili. Palvelun k\u00e4ytt\u00e4minen on maksutonta eik\u00e4 rekister\u00f6itymiseen tarvita maksutietoja. Voit rekister\u00f6ity\u00e4 GitHub palveluun osoitteessa https://github.com/.</p>"},{"location":"etarepositoriot/","title":"Et\u00e4repositoriot","text":""},{"location":"etarepositoriot/#repositoriouden-hajautus","title":"Repositoriouden hajautus","text":"<p>Kuten jo aiemmin todettiin, git tallettaa kaiken informaation paikallisesti omaan tietovarastoonsa, jota kutsutaan repositorioksi. Paikallinen tietovarasto sis\u00e4lt\u00e4\u00e4 kaiken tarvittavan tiedon</p> <p>Itsen\u00e4isten repositorioiden v\u00e4lille voidaan m\u00e4\u00e4ritell\u00e4 yhteys, jolloin niiden sis\u00e4lt\u00f6j\u00e4 voidaan synkronoida kesken\u00e4\u00e4n. Synkronointia voidaan tehd\u00e4 yhteen suuntaan tai molempiin.</p> <p>Muut repositoriot, joihin paikallisella repositoriolla on yhteys, ovat et\u00e4repositorioita (remote).</p> <p>T\u00e4h\u00e4n kuva</p>"},{"location":"etarepositoriot/#kloonaus","title":"Kloonaus","text":"<p>Kun ty\u00f6skennell\u00e4\u00e4n projektissa, on jossakin yhteisesti sovittu p\u00e4\u00e4-repositorio, jossa pidet\u00e4\u00e4n yll\u00e4 yhteist\u00e4 koodia. T\u00e4ll\u00f6in paikallinen kopio repositoriosta saadaan helposti clone-operaatiolla</p> <p><pre><code>git clone https://github.com/libgit2/libgit2\n</code></pre> Kloonaaminen tekee valmiin paikallisen repositorion, joka on t\u00e4ydellinen kopio alkuper\u00e4isest\u00e4: - lis\u00e4\u00e4 hakemistoon master-haaran uusimmat tiedostot - konfiguroi alkuper\u00e4isen repositorion uuden repositorion et\u00e4repositorioksi oletusnimell\u00e4 <code>origin</code></p> <p>T\u00e4st\u00e4 voi heti jatkaa kehityst\u00e4 omassa ty\u00f6tilassaan.</p>"},{"location":"etarepositoriot/#etarepositorion-maarittely","title":"Et\u00e4repositorion m\u00e4\u00e4rittely","text":"<p>Et\u00e4repositoriosuhteita voi m\u00e4\u00e4ritt\u00e4\u00e4 my\u00f6s ilman kloonausta. T\u00e4m\u00e4 on tarpeen esim. silloin, kun haluat tehd\u00e4 projektin yhteisen repositorion olemassa olevasta paikallisesta repositoriosta.</p> <p>Voit m\u00e4\u00e4ritell\u00e4 et\u00e4repositorioita komennolla <code>remote add</code>:</p> <p><pre><code>git remote add origin https://github.com/user/repository.git\n</code></pre> - <code>origin</code> of et\u00e4repositoriolle annettu nimi - <code>https://github.com/user/repository.git</code> on sen osoite.</p> <p>Koska <code>origin</code> on et\u00e4repositorion oletusnimi, sit\u00e4 k\u00e4ytet\u00e4\u00e4n useimmiten. Se on kuitenkin vain nimi, ei varattu sana. </p> <p>Voit listata et\u00e4repositoriot komennolla <code>remote</code>. </p> <p><pre><code>git remote\n</code></pre> Enemm\u00e4n tietoja saat laajentimella <code>\u2013v</code> (<code>--verbose</code>). <pre><code>git remote -v\n</code></pre> Et\u00e4repositorioita voi uudelleennimet\u00e4 komennolla <code>rename</code> ja poistaa komennolla <code>rm</code>. <pre><code>git remote rename origin temp\ngit remote rm temp\n</code></pre></p>"},{"location":"etarepositoriot/#tietojen-haku-etarepositoriosta","title":"Tietojen haku et\u00e4repositoriosta","text":"<p>Repositorioiden tietojen synkronointi tapahtuu kahdessa vaiheessa: 1. Et\u00e4repositorien haarassa olevat tiedot haetaan paikalliseen repositorioon paikallisten haarojen rinnalle (fetch). 2. Et\u00e4repositorion haara yhdistet\u00e4\u00e4n sit\u00e4 vastaavaan paikalliseen haaraan (merge).</p>"},{"location":"etarepositoriot/#fetch","title":"Fetch","text":"<p>Komento fetch lataa et\u00e4repositorion tiedot paikalliseen repositorioon. </p> <p><pre><code>git fetch origin\n</code></pre> Se ei kuitenkaan tee muutoksia paikallisen repositorion haaroihin vaan tallettaa ne erikseen. Fetch on siis t\u00e4ysin turvallinen komento, mik\u00e4\u00e4n repositoriossasi ei muutu, ellet niin erikseen k\u00e4ske.</p> <p>Et\u00e4repositorion haarat l\u00f6ytyv\u00e4t et\u00e4repositorion nimen alta, esim. <code>origin/master</code>. et\u00e4repositorion haarat voit listata laajentimella <code>\u2013r</code>.</p> <pre><code>git branch -r\n</code></pre> <p>Voit tutkia et\u00e4repositoriosta ladattua sis\u00e4lt\u00f6\u00e4 tavallisella <code>checkout</code>-komennolla (ja <code>git log</code> yms.) ja halutessasi yhdist\u00e4\u00e4 paikalliseen sis\u00e4lt\u00f6\u00f6n tavallisella <code>merge</code>-komennolla.</p> <pre><code>git checkout master\ngit merge origin/master\n</code></pre>"},{"location":"etarepositoriot/#pull","title":"Pull","text":"<p>Fetch lataa et\u00e4repositoryst\u00e4 saataville kaikki muutokset, joita sinulla ei viel\u00e4 ole. Jotta saisit ne oman repositorysi haaraan, ne on yhdistett\u00e4v\u00e4 sinne (merge). </p> <p>Koska t\u00e4m\u00e4 kaksivaiheinen operaatio on niin tavallinen, sille on erikseen komento pull, joka hakee nykyisen haaran uudet tiedot et\u00e4repositorysta ja tekee mergen nykyiseen haaraasi automaattisesti.</p> <pre><code>git pull origin \n</code></pre> <p>T\u00e4m\u00e4 toiminto on siis sama kuin </p> <pre><code>git fetch\ngit merge\n</code></pre> <p>Koska <code>pull</code> tekee my\u00f6s yhdist\u00e4misen, komennon suorituksessa voi tulla konflikteja. Joskus voi olla selke\u00e4mp\u00e4\u00e4 tehd\u00e4 toiminnot erikseen.</p>"},{"location":"etarepositoriot/#tietojen-vienti-etarepositorioon-push","title":"Tietojen vienti et\u00e4repositorioon (push)","text":"<p>Komento <code>push</code> synkronoi paikallisen repositoryn tietoja et\u00e4repositoryyn.</p> <p><pre><code>git push origin master    # vie paikallinen master origin-repositorioon\n</code></pre> - <code>origin</code> on et\u00e4repositorion nimi, johon tietoja vied\u00e4\u00e4n - <code>master</code> on viet\u00e4v\u00e4n haaran nimi</p> <p>Paikallisia haaroja ei automaattisesti vied\u00e4 et\u00e4repositoryyn vaan ne pit\u00e4\u00e4 eksplisiittisesti vied\u00e4 sinne. N\u00e4in voit j\u00e4tt\u00e4\u00e4 osan haaroista t\u00e4ysin paikallisiksi, esim. v\u00e4liaikaisia haaroja usein ei tarvitse synkronoida.</p> <p>Kaikki paikalliset haarat vied\u00e4\u00e4n, jos k\u00e4yt\u00e4t laajenninta <code>\u2013all</code>.</p> <pre><code>git push --all            # vie kaikki paikalliset haarat origin-repositorioon\n</code></pre> <p>Ensimm\u00e4isell\u00e4 kerralla kannattaa k\u00e4ytt\u00e4\u00e4 <code>push</code>-komennossa laajenninta <code>\u2013u</code> (<code>--set-upstream</code>). Se asettaa kyseinen et\u00e4repositoriohaaran viet\u00e4v\u00e4n paikallisen haaran oletusarvoiseksi et\u00e4repositoriohaaraksi. </p> <pre><code>git push -u origin master\n</code></pre> <p>T\u00e4ll\u00f6in et\u00e4repository\u00e4 ei tarvitse jatkossa erikseen komennossa ilmoittaa vaan riitt\u00e4\u00e4 </p> <pre><code>git push                  # vie nykyinen haara oletusarvoiseen et\u00e4haaraansa\n</code></pre>"},{"location":"etarepositoriot/#etarepositoriot-ja-haarat","title":"Et\u00e4repositoriot ja haarat","text":"<p>Et\u00e4repositoryjen synkronoinnissa on itse asiassa kyse haarojen synkronoinnista. </p> <p>Kun teet haaroja paikallisesti, ja k\u00e4yt\u00f6ss\u00e4 on et\u00e4repositorio, on p\u00e4\u00e4tett\u00e4v\u00e4, haluatko synkronoida sen vai et. Jos haluat, sinun t\u00e4ytyy erikseen se sinne vied\u00e4 (ellet k\u00e4yt\u00e4 laajenninta <code>--a</code>). Samalla kannattaa m\u00e4\u00e4ritt\u00e4\u00e4 et\u00e4haaralle oletusarvo, niin synkronointi on jatkossa helpompaa. <pre><code>git push -u origin feat123\n</code></pre></p> <p>Komento fetch tuo haaran tiedot paikalliseen repositoryyn, mutta ei yhdist\u00e4 sit\u00e4</p> <pre><code>git fetch origin\n</code></pre> <p>Tuloksena paikalliseen repositoryyn tulee tiedot et\u00e4repositoryn muutoksista. Ne talletetaan paikallisiin haaroihin, joiden nimi on muotoa <code>&lt;et\u00e4repository&gt;/&lt;haara&gt;</code>.</p> <p>Paikallinen <code>origin/master</code> on siis kopio et\u00e4repositoryn <code>origin</code> haarasta <code>master</code>. Kun yhdist\u00e4t tuotuja haaroja, se tapahtuu paikallisen kopion kanssa. </p> <pre><code>git merge origin/master\n</code></pre> <p>Komento <code>git pull</code> tekee molemmat toimenpiteet kerralla. Se hakee ensin et\u00e4repositorion haaran (fetch) ja yhdist\u00e4\u00e4 sen paikalliseen haaraan (merge). <pre><code>git pull origin\n</code></pre></p>"},{"location":"etarepositoriot/#useita-etarepositorioita","title":"Useita et\u00e4repositorioita","text":"<p>Useimmiten sis\u00e4lt\u00f6j\u00e4 synkronoidaan vain yhden et\u00e4repositorion kanssa, mutta niit\u00e4 voi olla useampiakin. T\u00e4ll\u00f6in kaikkien synkronoitavien repositorioiden pit\u00e4\u00e4 olla samaa kantaa, niill\u00e4 pit\u00e4\u00e4 olla yhteinen l\u00e4ht\u00f6kohta, johon versiohistorioita voidaan yhdist\u00e4\u00e4.</p> <p>Seuraavassa esimerkiss\u00e4 paikalliselle repositoriolle on m\u00e4\u00e4ritelty kaksi et\u00e4repositoriota, <code>origin</code> ja <code>upstream</code>. Tilanne voisi olla seuraava:</p> <ul> <li>Pilvipalvelussa sijaitsevassa <code>upstream</code>-repositoriossa on kurssin teht\u00e4vi\u00e4, joita opiskelijat voivat kloonata omaan repositorioonsa. </li> <li>Opiskelija tekee teht\u00e4v\u00e4t ja tallettaa vastaukset omaan repositorioonsa.</li> <li>Opiskelija perustaa pilvipalveluun oman repositorion palautuksia varten ja jakaa sit\u00e4 kautta palautukset opettajalle.</li> </ul> <p>T\u00e4ss\u00e4 tapauksessa opiskelijalla ei ole kirjoitusoikeutta <code>upstream</code>-repositorioon. H\u00e4n voi kuitenkin yhdist\u00e4\u00e4 sielt\u00e4 saatavia mahdollisia teht\u00e4v\u00e4p\u00e4ivityksi\u00e4 omaan repositorioonsa, koska kaikilla repositorioilla on yhteinen alkuper\u00e4, <code>upstream</code>-repositorio.</p> <p></p>"},{"location":"haarat/","title":"Haarat","text":""},{"location":"haarat/#johdanto","title":"Johdanto","text":"<p>Jos halutaan kehitt\u00e4\u00e4 samasta ohjelmistosta useita rinnakkaisia versioita yhtaikaa, tarvitaan versiopuuhun haara (branch)</p> <p>Haarautumista tarvitaan esim., kun - Kehitet\u00e4\u00e4n tuotteen seuraavaa versiota samaan aikaan, kun nykyiseen tehd\u00e4\u00e4n korjauksia - Tehd\u00e4\u00e4n asiakaskohtaisia korjauksia tai r\u00e4\u00e4t\u00e4l\u00f6intej\u00e4 - Moni kehitt\u00e4j\u00e4 kehitt\u00e4\u00e4 samaa ohjelmistoa yhtaikaa.</p> <p></p> <p>L\u00e4hde: Git Branch, Atlassian</p> <p>Jokaisessa mainituista tapauksista halutaan tehd\u00e4 yhtaikaisesti kehityst\u00e4 kahteen tai useampaan versioon ohjelmistosta. Monen kehitt\u00e4j\u00e4n tapauksessa jokainen kehitt\u00e4j\u00e4 luo omaa versiotaan ohjelmistosta. </p> <p>Versionhallintaj\u00e4rjestelm\u00e4n keinoin haarautuneet versiot ohjelmistosta voidaan j\u00e4lleen yhdist\u00e4\u00e4 (merge). Esimerkiksi, kehitt\u00e4j\u00e4 yhdist\u00e4\u00e4 oman kehityshaaransa muutokset yhteiseen versiohaaraan, josta toiset kehitt\u00e4j\u00e4t saavat sen k\u00e4ytt\u00f6\u00f6ns\u00e4 ja edelleen kehitett\u00e4v\u00e4ksi.</p>"},{"location":"haarat/#miten-git-toimii","title":"Miten Git toimii","text":"<p>Haarautumisen ymm\u00e4rt\u00e4miseksi on syyt\u00e4 perehty\u00e4 muutamiin Git:n toimintaperiaatteisiin.</p> <p>Talletus (commit) tallettaa  1. viittaukset niihin tiedostoversioihin, jotka olet sinne lis\u00e4nnyt (snapshot), sek\u00e4  2. viittauksen edelliseen talletukseen. </p> <p>Muutoksia voi siis navigoida taaksep\u00e4in seuraamalla viittauksia.</p> <p>Haara (branch) on viittaus talletukseen, josta tulee aikanaan seuraavan talletuksen edelt\u00e4j\u00e4. Kun teet uuden talletuksen, haaraviittaus siirtyy eteenp\u00e4in osoittamaan tekem\u00e4\u00e4si uutta talletusta. </p> <p>Haara siis antaa nimen tiettyyn talletusketjuun, ja haaraviittauksen avulla l\u00f6ydet\u00e4\u00e4n sen tuorein talletus.</p> <p>HEAD on viittaus siihen haaraan, jossa t\u00e4ll\u00e4 hetkell\u00e4 olet. Se on looginen tunniste, ei haara. </p> <p>Jokin haara on aina valittuna, HEAD viittaa aina johonkin haaraan.</p> <p></p> <p>L\u00e4hde: Chacon S., Straub B, Pro Git, luku 3. CC BY-NC-SA 3.0</p>"},{"location":"haarat/#uuden-haaran-luominen","title":"Uuden haaran luominen","text":"<p>Kun perustat repositoryn, sinulle on jo valmiiksi luotu yksi haara nimelt\u00e4 <code>master</code>, ja <code>HEAD</code> viittaa siihen. Se on Git:n oletushaara. </p> <p>Joka kerta, kun teet talletuksen, <code>master</code>-viittaus siirtyy eteenp\u00e4in siihen, jonka juuri teit.</p> <p>Voit luoda haaran komennolla <code>branch</code>.</p> <pre><code>git branch testing\n</code></pre> <p>T\u00e4m\u00e4 luo uuden haaran, joka osoittaa samaan talletukseen kuin nykyinen haarasikin. T\u00e4ll\u00e4 hetkell\u00e4 haarojen v\u00e4lill\u00e4 ei ole mit\u00e4\u00e4n eroa.</p> <p>Huomaa, ett\u00e4 <code>HEAD</code> ei siirry! Olet edelleen <code>master</code>-haarassa.</p> <p></p> <p>L\u00e4hde: Chacon S., Straub B, Pro Git, luku 3. CC BY-NC-SA 3.0</p>"},{"location":"haarat/#haaran-vaihtaminen","title":"Haaran vaihtaminen","text":"<p>N\u00e4et nykyisen haarasi komennolla <code>status</code> <pre><code>git status\n</code></pre></p> <p>N\u00e4et olemassa olevat haarat komennolla <code>branch</code> <pre><code>git branch\n</code></pre></p> <p>Haaran voit vaihtaa komennolla <code>switch</code> <pre><code>git switch testing\n</code></pre></p> <p>Nyt <code>HEAD</code> osoittaa uuteen <code>testing</code>-haaraan, ja seuraava talletus tulee menem\u00e4\u00e4n siihen.</p> <p></p> <p>L\u00e4hde: Chacon S., Straub B, Pro Git, luku 3. CC BY-NC-SA 3.0</p>"},{"location":"haarat/#haarauttaminen","title":"Haarauttaminen","text":"<p>Toistaiseksi ei ole viel\u00e4 tehty mit\u00e4\u00e4n muutoksia, mutta tehd\u00e4\u00e4np\u00e4 nyt yksi talletus (nykyinen haara on siis <code>testing</code>).</p> <p><code>testing</code>-haara siirtyy nyt yhden talletuksen eteenp\u00e4in, mutta <code>master</code> j\u00e4\u00e4 ennalleen.</p> <p></p> <p>L\u00e4hde: Chacon S., Straub B, Pro Git, luku 3. CC BY-NC-SA 3.0</p> <p>Jos nyt vaihdat takaisin master-haaraan, - <code>HEAD</code> siirtyy osoittamaan <code>master</code>-haaraa ja - ty\u00f6hakemiston tiedostot muutetaan takaisin master-haaran tilanteeseen.</p> <p></p> <p>L\u00e4hde: Chacon S., Straub B, Pro Git, luku 3. CC BY-NC-SA 3.0</p> <p>Haaroissa <code>master</code> ja <code>testing</code> on nyt erilaiset versiot. </p> <p>Vaihtamalla haaraa voit  tarkastella niit\u00e4, kehitt\u00e4\u00e4 niit\u00e4 eteenp\u00e4in ja tehd\u00e4 niist\u00e4 uusia versioita toisistaan riippumatta.  </p> <p>Eri haaroihin tehdyt muutokset pysyv\u00e4t erillisin\u00e4, ja voit milloin tahansa palata l\u00e4ht\u00f6tilanteeseen, jos tulet katumap\u00e4\u00e4lle. Toiseen haaraan tekem\u00e4si muutokset j\u00e4\u00e4v\u00e4t silti talteen, ja voit jatkaa niidenkin kehitt\u00e4mist\u00e4. </p>"},{"location":"haarat/#eriytyneet-haarat","title":"Eriytyneet haarat","text":"<p>Jos esimerkiss\u00e4mme nyt teet uuden talletuksen <code>master</code>-haaraan, projektilla on kaksi toisistaan erkaantunutta haaraa. Erkaantunut tarkoittaa sit\u00e4, ett\u00e4 molemmissa haaroissa on talletuksia, joita toisessa ei ole. </p> <p>Molempia voidaan kehitt\u00e4\u00e4 eteenp\u00e4in toisistaan riippumatta t\u00e4ysin hallitusti. </p> <p></p> <p>L\u00e4hde: Chacon S., Straub B, Pro Git, luku 3. CC BY-NC-SA 3.0</p> <p>Nyt commit-lokin esitt\u00e4minen k\u00e4y v\u00e4h\u00e4n hankalammaksi, kun on esitett\u00e4v\u00e4 rinnakkain etenevi\u00e4 historiapolkuja, esim n\u00e4in: <pre><code>git log --graph --all --oneline\n</code></pre></p> <p>Haaroittumisen visualisoinnissa graafiset ty\u00f6kalut voisivat olla paikallaan, esim. GitGUI</p> <p>Materiaalissa pit\u00e4isi ehk\u00e4 olla jokin vinkki hyvist\u00e4 ty\u00f6kaluista</p>"},{"location":"haarat/#yhdistaminen-merge","title":"Yhdist\u00e4minen (merge)","text":"<p>Haaroihin eriytynyt kehitys halutaan usein j\u00e4lleen yhdist\u00e4\u00e4, esim. haarassa tehty korjaus halutaan vied\u00e4 p\u00e4\u00e4kehityshaaraan. </p> <p>Seuraavassa esimerkiss\u00e4 p\u00e4\u00e4kehityshaara on <code>master</code> ja haaraan <code>iss53</code> on tehty vikakorjausta. Vikakorjaus on nyt valmis ja se halutaan vied\u00e4 p\u00e4\u00e4kehityshaaraan.</p> <p></p> <p>L\u00e4hde: Chacon S., Straub B, Pro Git, luku 3. CC BY-NC-SA 3.0</p> <p>Yhdist\u00e4misen logiikka on, ett\u00e4 haaraan, johon yhdistet\u00e4\u00e4n, tehd\u00e4\u00e4n uusi talletus, joka sis\u00e4lt\u00e4\u00e4 molempien haarojen muutokset.</p> <p>T\u00e4ss\u00e4 esimerkiss\u00e4 on kehitetty korjausta haarassa <code>iss53</code>. Sen yhdist\u00e4minen <code>master</code>-haaraan k\u00e4y n\u00e4in: <pre><code>git switch master   # siirryt\u00e4\u00e4n siihen haaraan, johon muutos halutaan yhdist\u00e4\u00e4\ngit merge iss53     # yhdist\u00e4minen tehd\u00e4\u00e4n komennolla merge\n</code></pre> Toiminto merge tekee uuden talletuksen, jossa on yhdistetty molempien haarojen muutokset. Jos muutokset ovat automaattisesti yhdistett\u00e4viss\u00e4, asia on kerralla selv\u00e4. </p> <p></p> <p>L\u00e4hde: Chacon S., Straub B, Pro Git, luku 3. CC BY-NC-SA 3.0</p>"},{"location":"haarat/#konflikti-merge-conflict","title":"Konflikti (merge conflict)","text":"<p>Jos eri haarojen muutokset ovat joltain osin kesken\u00e4\u00e4n ristiriitaisia, yhdist\u00e4minen ei onnistukaan suoraan, vaan Git raportoi konfliktin.</p> <p>T\u00e4ll\u00f6in talletus j\u00e4\u00e4 kesken, ja hakemistossa on konfliktin sis\u00e4lt\u00e4vist\u00e4 tiedostoista uudet versiot, joissa Git on yhdist\u00e4nyt kaiken sen, mit\u00e4 se automaattisesti kykeni. Git on merkinnyt ja lis\u00e4nnyt ristiriitakohtiin molempien haarojen muutokset. </p> <p>Konflikti kuulostaa pahalta, mutta kyse on vain siit\u00e4, ett\u00e4 ei ole mahdollista koneellisesti p\u00e4\u00e4tt\u00e4\u00e4, mik\u00e4 on oikea tapa yhdist\u00e4\u00e4 muutokset. Kehitt\u00e4j\u00e4n on korjattava k\u00e4sin ristiriitaiset kohdat (resolve conflict). Kun se on tehty, h\u00e4n tekee normaalisti commitin.</p> <p>Koodieditoreissa on toiminnallisuuksia, jotka auttavat konfliktien ratkaisemisessa.</p> <p></p>"},{"location":"haarat/#esimerkki-konfliktista","title":"Esimerkki konfliktista","text":"<p><pre><code>$ git merge testing\nAuto-merging hello.html\nCONFLICT (content): Merge conflict in hello.html\nAutomatic merge failed; fix conflicts and then commit the result.\n</code></pre> </p> <pre><code>$ git status\nOn branch master\nYou have unmerged paths.\n  (fix conflicts and run \"git commit``\")\n  (use \"git merge --abort\" to abort the merge)\n\nUnmerged paths:\n  (use \"git add &lt;file&gt;...\" to mark resolution)\n\n        both modified:   hello.html\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n</code></pre>"},{"location":"haarat/#konfliktin-ratkaiseminen","title":"Konfliktin ratkaiseminen","text":"<p>Kehitt\u00e4j\u00e4 tekee oikeat korjaukset ja poistaa konfliktimerkit tiedostoista. Sitten vain lis\u00e4t\u00e4\u00e4n korjatut tiedostot committiin ja tehd\u00e4\u00e4n commit.</p> <p><pre><code>$ git add . \n$ git status\nOn branch master\nAll conflicts fixed but you are still merging.\n  (use \"git commit\" to conclude merge)\n\nChanges to be committed:\n\n        modified:   hello.html\n\n$ git commit\n[master 577421e] Merge branch 'testing'\n</code></pre> </p>"},{"location":"haarat/#haarautumisen-kayttotapoja","title":"Haarautumisen k\u00e4ytt\u00f6tapoja","text":"<p>Haarautumista voit k\u00e4ytt\u00e4\u00e4, kun haluat pit\u00e4\u00e4 uuden kehityksen erill\u00e4\u00e4n kehityksen, jotta et sotkisi toimivaa versiota  keskener\u00e4isill\u00e4, toimimattomilla tai ep\u00e4yhteensopivilla commiteilla, esim. - Kehit\u00e4t ominaisuutta, joka vaatii muutoksia nykyisiin toiminnallisuuksiin. - Haluat kokeilla jotain turvallisesti sotkematta varsinaista kehityst\u00e4. - Kehit\u00e4t tuotteen useita versioita yhtaikaa, esim. version 1 vikakorjauksia ja version 2 uuskehityst\u00e4.</p> <p>Haaroittamisstrategioita on useita. Yksi yleinen ja yksinkertainen strategia on, ett\u00e4 kaikki uudet ominaisuudet kehitet\u00e4\u00e4n omissa haaroissaan, ja ne yhdistet\u00e4\u00e4n p\u00e4\u00e4haaraan vasta, kun ne ovat valmiita ja toimivia (feature branch workflow).</p>"},{"location":"haarat/#toiminnallisuus-omaan-haaraan-feature-branch","title":"Toiminnallisuus omaan haaraan (feature branch)","text":"<p>Ota l\u00e4ht\u00f6kohdaksi p\u00e4\u00e4haarasi (t\u00e4ss\u00e4 master) tuorein commit <pre><code>git checkout master         # vaihda master-haaraan\n</code></pre></p> <p>Luo uudelle ominaisuudelle haara (git branch) ja vaihda siihen haaraan  (git switch). T\u00e4h\u00e4n on pikakomento: <pre><code>git switch \u2013c feat123       # luo haaran ja vaihtaa siihen \n</code></pre></p> <p>Tee muutoksia ja committeja feat123-haaraan, ja kun toiminnallisuus on valmis, yhdist\u00e4 muutokset p\u00e4\u00e4haaraan <pre><code>git add .\ngit commit\ngit checkout master\ngit merge feat123\n</code></pre></p>"},{"location":"haarat/#pysyvat-ja-valiaikaiset-haarat","title":"Pysyv\u00e4t ja v\u00e4liaikaiset haarat","text":"<p>Useimmat ty\u00f6nkulut perustuvat siihen, ett\u00e4 jotkin haarat ovat p\u00e4\u00e4haaroja, joissa pidet\u00e4\u00e4n yll\u00e4 tuoreinta tilannetta, ja yksitt\u00e4isille ominaisuuksille voidaan tehd\u00e4 omia v\u00e4liaikaisia haaroja, jotka on tarkoitus yhdist\u00e4\u00e4 johonkin p\u00e4\u00e4haaraan.</p> <p>P\u00e4\u00e4haarat ovat sellaisia konfiguraatioita, joita kehitet\u00e4\u00e4n pitk\u00e4n aikaa, esim. ohjelmiston versio 1, 2, 3 jne. V\u00e4liaikaiset haarat voidaan poistaa sen j\u00e4lkeen, kun ne on onnistuneesti yhdistetty johonkin p\u00e4\u00e4haaraan.</p> <p>My\u00f6s voidaan toimia niin, ett\u00e4 toimitettaville versioille (release) on omat p\u00e4\u00e4haaransa, ja kehitys pidet\u00e4\u00e4n omassa p\u00e4\u00e4haarassaan. </p> <p>T\u00e4ll\u00f6in v\u00e4liaikaiset haarat yhdistet\u00e4\u00e4n ensin kehityshaaraan, ja kehityshaarasta yhdistet\u00e4\u00e4n release-haaraan vain valmiit testatut ja viimeistellyt toimitettavat versiot.</p> <p>Tilanteeseen sopivinta haaroittamisk\u00e4yt\u00e4nt\u00f6\u00e4 kannattaa mietti\u00e4 projektin alussa hetki, vaikka olisit tekem\u00e4ss\u00e4 projektia yksinkin. Yksitt\u00e4inen kehitt\u00e4j\u00e4kin voi tehostaa ty\u00f6t\u00e4\u00e4n hy\u00f6dynt\u00e4m\u00e4ll\u00e4 haarautumista.</p>"},{"location":"haarat/#harjoitus-4","title":"Harjoitus 4","text":"<p>Harjoitellaan ominaisuushaarojen (feature branch) k\u00e4ytt\u00f6\u00e4 kehityksess\u00e4.</p> <ol> <li><code>hello</code>-ohjelmamme on viel\u00e4 kovin riisuttu. Lis\u00e4t\u00e4\u00e4n siihen HTML-sivun perusrakenne: <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n  &lt;title&gt;Hello&lt;/title&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n  &lt;main&gt;\n    &lt;h1&gt;Hei maailma!&lt;/h1&gt;\n  &lt;/main&gt;\n\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre></li> <li>Talleta muutokset <code>master</code>-haaraan.</li> <li> <p>Lis\u00e4t\u00e4\u00e4n tyylej\u00e4. Lis\u00e4\u00e4 projektiin tiedosto <code>styles.css</code>, jonka sis\u00e4lt\u00f6 voi olla esim. <pre><code>html {\n  height: 100%;\n}\n\nbody {\n  background-color:linen;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  height: 100%;\n}\n\nmain {\n  text-align: center;\n}\n</code></pre> Tyylit pit\u00e4\u00e4 viel\u00e4 liitt\u00e4\u00e4 <code>hello.html</code>-tiedostoon. Lis\u00e4\u00e4 sen <code>head</code>-osioon m\u00e4\u00e4ritys <pre><code>&lt;link rel=\"stylesheet\" href=\"styles.css\"&gt;\n</code></pre> Testaa selaimessa, ett\u00e4 sivun tyylit toimivat.</p> </li> <li> <p>K\u00e4ytet\u00e4\u00e4n ominaisuushaaraa: Luo muutosta varten uusi haara esim. nimell\u00e4 <code>tyylit</code> ja talleta tyylimuutokset sinne.</p> </li> <li> <p>Kokeile vaihtaa aktiivista haaraa haarojen <code>master</code> ja <code>tyylit</code> v\u00e4lill\u00e4 ja lataa sivu selaimessa aina uudelleen. Miten sivu muuttuu?</p> </li> <li> <p>Kun olet tyytyv\u00e4inen <code>tyylit</code>-haaran versioon, yhdist\u00e4 se <code>master</code>-haaraan. </p> </li> <li> <p>Kokeile vaihtaa aktiivista haaraa haarojen <code>master</code> ja <code>tyylit</code> v\u00e4lill\u00e4 ja lataa sivu selaimessa aina uudelleen. Miten sivu muuttuu? </p> </li> </ol>"},{"location":"hosting_palvelut/","title":"Git-hosting-palvelut","text":"<p>Git-hosting tarkoittaa repositoriotilan ja Git-palvelujen tarjoamista verkossa k\u00e4ytett\u00e4v\u00e4ksi. </p> <p>Git-hosting voidaan tehd\u00e4 yrityksen omilla palvelimilla (self hosting) tai internet-palveluntarjoajan palvelimilla (cloud hosting). </p> <p>K\u00e4ytetyimm\u00e4t palvelut ovat</p> <ul> <li>GitHub (https://github.com/)</li> <li>Bitbucket (https://bitbucket.org/)</li> <li>GitLab (https://gitlab.com/)</li> </ul>"},{"location":"hosting_palvelut/#palvelujen-kaytto","title":"Palvelujen k\u00e4ytt\u00f6","text":"<p>Kuten muissakin online-palveluissa, k\u00e4ytt\u00e4jien on avattava tili palvelussa.  Tilille voi perustaa useita repositorioita (projekteja).</p> <p>Palvelussa oleva reposiotorio toimii kehitt\u00e4j\u00e4n et\u00e4repositoriona. Palvelussa olevan et\u00e4repositorion kautta kehitt\u00e4j\u00e4 voi jakaa oman ty\u00f6ns\u00e4  muille, ja vastaavasti saada muiden kehitt\u00e4jien tekemi\u00e4 muutoksia omaan paikalliseen repositorioonsa.</p> <p>Kirjautumisten helpottamiseksi palveluihin voi tallettaa SSH-salausavaimen, jolloin liikenn\u00f6inti repositoryjen kanssa tapahtuu SSH-protokollalla ilman erillist\u00e4 kirjautumista.</p> <p>Palvelut tarjoavat Git-toiminnallisuuden ja talletustilan lis\u00e4ksi mm. - Projektin j\u00e4senten k\u00e4sittelyn (collaborators) - Vikaraportoinnin (issue and bug tracking) - Projektinhallintatoiminnallisuutta (agile boards)</p> <p>Ilmaisella tilill\u00e4 on mahdollista toteuttaa pieni\u00e4 projekteja. Maksullisilla tilauksilla saadaan suurempien projektien toteuttamiseen tarvittavia palveluja.</p>"},{"location":"hosting_palvelut/#repositoryjen-luominen-palveluun","title":"Repositoryjen luominen palveluun","text":"<p>Repositorioita voi luoda palvelun web-k\u00e4ytt\u00f6liittym\u00e4ss\u00e4. Osa palveluista tukee my\u00f6s repositoryn perustamista suoraan push-operaatiolla</p> <p>Repositorioihin voidaan lis\u00e4t\u00e4 j\u00e4seni\u00e4 (collaborator), ja heille voidaan antaa erilaisia oikeuksia, esim. guest, reporter, developer, maintainer.</p> <p>Erilaisia toimintoja ja asetuksia on runsaasti, esim. notifikaatioita, automaattisia toimintoja (hooks).</p> <p>Perehdy palveluntarjoajasi ohjeisiin. Kaikilla suurilla palveluilla on erinomainen dokumentaatio.</p>"},{"location":"hosting_palvelut/#readme-ja-markdown","title":"README ja Markdown","text":"<p>Palvelut esitt\u00e4v\u00e4t README-nimisen tiedoston repositoryn etusivulla. Yleens\u00e4 siit\u00e4 tehd\u00e4\u00e4n projektin kotisivu. README kirjoitetaan Markdown-kielell\u00e4. </p> <p>Markdown on yksinkertainen merkkauskieli, katso esim. https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet</p> <p>Koodieditoreihin on saatavana Markdown tukilaajennuksia, esim. esikatselu</p> <p>Markdownia k\u00e4ytet\u00e4\u00e4n usein projektien dokumentointiin, sill\u00e4 siten saadaan dokumentaatiollekin samanlainen versionhallinta kuin koodille.</p> <p></p>"},{"location":"hosting_palvelut/#harjoitus-5","title":"Harjoitus 5","text":"<p>Vied\u00e4\u00e4n projekti GitHub-palveluun.</p> <ol> <li> <p>Lis\u00e4\u00e4 GitHubiin tyhj\u00e4 repositorio. </p> <ul> <li>\u00c4l\u00e4 anna GitHubin tehd\u00e4 sinne mit\u00e4\u00e4n, ei edes README-tiedostoa!. </li> </ul> <p>Mit\u00e4 GitHub-repositoriosivulla n\u00e4kyy?</p> </li> <li> <p>Konfiguroi uusi repositorio paikallisen repositoriosi et\u00e4repositorioksi nimelle <code>origin</code>. </p> <ul> <li>Voit tarkistaa et\u00e4repositorioasetukset komennolla <code>git remote -v</code>.</li> </ul> </li> <li> <p>Puske paikallisen repositorion <code>master</code>-haara GitHubiin. </p> </li> <li> <p>Mit\u00e4 GitHub-repositoriosivulla nyt n\u00e4kyy? Mit\u00e4 haaroja n\u00e4et GitHubissa, ent\u00e4 paikallisessa repositoriossasi?</p> </li> <li> <p>GitHub-palvelun web-k\u00e4ytt\u00f6liittym\u00e4ss\u00e4 voi my\u00f6s tehd\u00e4 muutoksia repositorioon. Luo GitHubin k\u00e4ytt\u00f6liittym\u00e4ss\u00e4 jokin uusi tiedosto ja talleta muutos (Commit changes).</p> </li> <li> <p>Et\u00e4repositoriossa on nyt eri sis\u00e4lt\u00f6 kuin paikallisessa repositoriossasi. Hae muutokset paikalliseen repositorioon ja mene katsomaan niit\u00e4: <pre><code>git fetch     # muutokset haetaan muttei yhdistet\u00e4\ngit checkout origin/master \n</code></pre>     Mik\u00e4 muuttui?</p> </li> <li> <p>Palaa <code>master</code>-haaraan. Mit\u00e4 komento <code>status</code> sanoo?</p> </li> <li> <p>Yhdist\u00e4 <code>origin/master</code>-haaran muutokset. Mit\u00e4 komento <code>status</code> nyt sanoo?</p> </li> </ol> <p>Vinkkej\u00e4:</p> <ul> <li>GitHubin ohjeet repositorion luontiin</li> <li>gitHubin ohjeet tiedoston lis\u00e4\u00e4misest\u00e4 GitHubin k\u00e4ytt\u00f6liittym\u00e4ss\u00e4</li> </ul>"},{"location":"johdanto/","title":"Johdanto versionhallintaan","text":""},{"location":"johdanto/#mita-on-versionhallinta","title":"Mit\u00e4 on versionhallinta","text":"<p>Versionhallinnan tarkoituksena on tallettaa l\u00e4hdekoodin versioiden muutoksia siten, ett\u00e4</p> <ul> <li>Saman ohjelmiston eri versioille voidaan antaa tunnisteet muuttamatta ohjelmakoodin sis\u00e4lt\u00f6\u00e4 (esim. tiedostonimi\u00e4)</li> <li>Aikaisemmat versiot voidaan tarvittaessa palauttaa</li> <li>Ohjelmistosta voidaan kehitt\u00e4\u00e4 useita eri versioita yhtaikaa hallitusti.</li> <li>Ohjelmistoon tehtyj\u00e4 muutoksia voidaan seurata, dokumentoida ja hallita. </li> </ul> <p>Versionhallinta helpottaa ja tehostaa yksitt\u00e4isen kehitt\u00e4j\u00e4n ty\u00f6t\u00e4. Ennen kaikkea se kuitenkin mahdollistaa ohjelmistojen tehokkaan kehitt\u00e4misen ohjelmistotiimeiss\u00e4. </p> <p>Versionhallinnan k\u00e4ytt\u00f6 on yksi ohjelmistoalan ammattilaisen perustaitoja.</p>"},{"location":"johdanto/#mika-on-git","title":"Mik\u00e4 on Git","text":"<p>Versionhallintaj\u00e4rjestelmi\u00e4 on useita erilaisia. K\u00e4yt\u00e4nn\u00f6ss\u00e4 niist\u00e4 Git on muodostunut versionhallinnan de-facto standardiksi.</p> <p>Syyn\u00e4 Git:n suosioon lienee, ett\u00e4 se on </p> <ul> <li>Avointa l\u00e4hdekoodia. Git on lisensoitu avoimen l\u00e4hdekoodin GPLv2-lisenssill\u00e4. </li> <li>Ilmainen. </li> <li>Hajautettu. Siin\u00e4 ei ole mink\u00e4\u00e4nlaista keskitetty\u00e4 palvelinta. </li> <li>Saatavilla kaikkiin ymp\u00e4rist\u00f6ihin.</li> </ul>"},{"location":"johdanto/#git-repositoriot","title":"Git-repositoriot","text":"<p>Git tallettaa kaiken informaation paikallisesti omaan tietovarastoonsa, jota kutsutaan nimell\u00e4 repositorio. </p> <p>L\u00e4hes kaikki toiminnot voidaan tehd\u00e4 paikallisesti. Voit siis kehitt\u00e4\u00e4 ja tallettaa ohjelmiston versioita ilman verkkoyhteytt\u00e4.</p> <p>Repositorio sijaitsee paikallisella koneella siin\u00e4 hakemistossa, jossa ohjelmistoa kehitet\u00e4\u00e4n. </p>"},{"location":"johdanto/#repositorioiden-hajautus-ja-synkronointi","title":"Repositorioiden hajautus ja synkronointi","text":"<p>Itsen\u00e4isten repositoryjen sis\u00e4lt\u00f6j\u00e4 voidaan synkronoida kesken\u00e4\u00e4n. T\u00e4h\u00e4n tietysti tarvitaan verkkoyhteys. </p> <p></p> <p>Repositorioiden sis\u00e4lt\u00f6jen synkronointi mahdollistaa niiden sis\u00e4lt\u00f6jen jakamisen useiden kehitt\u00e4jien kesken. Tyypillinen malli on, ett\u00e4 kehitt\u00e4j\u00e4t synkronoivat oman ty\u00f6ns\u00e4 verkkopalvelussa sijaitsevaan repositorioon, ja saavat muiden kehitt\u00e4jien tekem\u00e4n ty\u00f6n sen kautta synkronoitua itselleen.</p>"},{"location":"johdanto/#gitn-kayttoonotto","title":"Git:n k\u00e4ytt\u00f6\u00f6notto","text":""},{"location":"johdanto/#komentorivi","title":"Komentorivi","text":"<p>Git:lle on useita graafisia k\u00e4ytt\u00f6liittymi\u00e4, my\u00f6s Windows-asennuspaketissa on yksi sellainen. T\u00e4ll\u00e4 kurssilla k\u00e4yt\u00e4mme kuitenkin komentorivikomentoja.  Niin tekev\u00e4t useimmat ammattilaisetkin.</p> <p>Windows-k\u00e4ytt\u00f6j\u00e4rjestelm\u00e4ll\u00e4 on kaksi komentotulkkia, cmd ja powershell. Git:n Windows-asennus sis\u00e4lt\u00e4\u00e4 Git Bash \u2013komentotulkin, joka emuloi iOS- ja Linux-j\u00e4rjestelmiin esiasennettua bash-komentotulkkia</p> <p>Git-komennot ovat kaikissa komentotulkeissa samat. Hakemistojen ja tiedostojen k\u00e4sittelykomennot voivat eri komentotulkeissa poiketa toisistaan. </p> <p>Jos komentotulkin k\u00e4ytt\u00e4minen ei ole entuudestaan tuttua, voit perehty\u00e4 siihen esim. oheisen materiaalin avulla: </p> <ul> <li>Command line crash course</li> </ul> <p>Huomautus</p> <p>T\u00e4ss\u00e4 materiaalissa k\u00e4ytet\u00e4\u00e4n mahdollisissa tiedostoj\u00e4rjestelm\u00e4komennoissa bash-komentoja. </p>"},{"location":"johdanto/#konfigurointi","title":"Konfigurointi","text":"<p>Asennuksen j\u00e4lkeen on tarpeen tehd\u00e4 joitakin konfigurointeja, ennen kuin git-k\u00e4ytt\u00f6 voidaan aloittaa.</p>"},{"location":"johdanto/#kayttajan-tiedot","title":"K\u00e4ytt\u00e4j\u00e4n tiedot","text":"<p>Jokaiseen talletettuun muutokseen tallentuu k\u00e4ytt\u00e4j\u00e4n nimi ja s\u00e4hk\u00f6postiosoite K\u00e4ytt\u00e4j\u00e4tiedot tarvitsee asettaa tietokoneelle vain kerran, ja niit\u00e4 voi tarvittaessa my\u00f6hemmin muuttaa <pre><code>git config \u2013-global user.name \u201dMarkku Ruonavaara\u201d\ngit config \u2013-global user.email markku.ruonavaara@haaga-helia.fi\n</code></pre></p> <p>Konfigurointitietoja tallennetaan systeemi-, k\u00e4ytt\u00e4j\u00e4- ja projektikohtaisesti. Tarkennin <code>-\u2013global</code> viittaa siihen, ett\u00e4 asetus on systeemikohtainen.</p>"},{"location":"johdanto/#editori","title":"Editori","text":"<p>Joidenkin toimintojen yhteydess\u00e4 Git k\u00e4ynnist\u00e4\u00e4 editorin tekstin kirjoittamista varten. Oletusarvoisesti se on systeemin oletuseditori, joka yleens\u00e4 on vi.</p> <p>Voit halutessasi asettaa editorin, jonka Git k\u00e4ynnist\u00e4\u00e4. Seuraava komento asettaa editoriksi Visual Studio Code:n.</p> <pre><code>git config --global core.editor \"code --wait\"\n</code></pre> <p>Konfiguroinnissa m\u00e4\u00e4ritet\u00e4\u00e4n k\u00e4ynnistyskomento, joten jos editoria ei l\u00f6ydy polusta, voit joutua antamaan koko polun. </p> <p>Jos kuitenkin joskus p\u00e4\u00e4dyt vi-editoriin, oheisesta ohjeesta voi olla sinulle hy\u00f6ty\u00e4: - https://www.linuxjournal.com/content/how-use-vi-editor-linux </p>"},{"location":"johdanto/#konfiguraatioasetusten-tarkastelu","title":"Konfiguraatioasetusten tarkastelu","text":"<p>Kaikki asetukset voit tarkistaa n\u00e4in: <pre><code>git config \u2013-list\n</code></pre></p> <p>Yhden parametrin arvon voit tarkistaa antamalla <code>config</code> komennon parametriksi parametrin nimen: <pre><code>git config user.email\n</code></pre></p>"},{"location":"johdanto/#git-komennoista-yleisesti","title":"Git-komennoista yleisesti","text":"<p>Kaikki Git-komennot alkavat <code>git</code>, sen j\u00e4lkeen tulee varsinainen komento (esim. <code>config</code>). Komennoilla voi olla parametreja. T\u00e4ss\u00e4 esimerkiss\u00e4 komennolle <code>config</code> annetaan parametriksi halutun konfiguraatioparametrin nimi <code>core.editor</code> <pre><code>git config core.editor\n</code></pre></p> <p>Huomautus</p> <p>T\u00e4ss\u00e4 materiaalissa Git-komentoihin viitataan tekstiss\u00e4 vain komento-osalla, esim. <code>config</code>. Komentorivill\u00e4 annettava komento on t\u00e4ll\u00f6in <code>git config</code>. </p> <p>Komennoille voidaan antaa my\u00f6s valitsimia (option), jotka t\u00e4sment\u00e4v\u00e4t, mit\u00e4 halutaan tehd\u00e4. T\u00e4ss\u00e4 esimerkiss\u00e4 valitsin <code>--list</code> m\u00e4\u00e4ritt\u00e4\u00e4, ett\u00e4 halutaan listata konfiguraatioparametrit, ja valitsin <code>--global</code>, ett\u00e4 halutaan vain globaalit, kaikkiin repositorioihisi vaikuttavat parametrit. <pre><code>git config --list --global\n</code></pre> Joillekin valitsimille voi olla my\u00f6s lyhyt muoto, esim. edellisen esimerkin valitsin <code>--list</code> voidaan my\u00f6s antaa lyhyemm\u00e4ss\u00e4 muodossa <code>-l</code>.  </p> <p>Kaikille komennoille saa lyhyen opastustekstin valitsimella <code>-h</code></p> <pre><code>$ git config -h\nusage: git config [&lt;options&gt;]\n\nConfig file location\n    --global              use global config file\n    --system              use system config file\n    --local               use repository config file\n    --worktree            use per-worktree config file\n    -f, --file &lt;file&gt;     use given config file\n    --blob &lt;blob-id&gt;      read config from given blob object\n\nAction\n    --get                 get value: name [value-pattern]\n    --get-all             get all values: key [value-pattern]\n    --get-regexp          get values for regexp: name-regex [value-pattern]\n    --get-urlmatch        get value specific for the URL: section[.var] URL\n    --replace-all         replace all matching variables: name value [value-pattern]\n    --add                 add a new variable: name value\n    --unset               remove a variable: name [value-pattern]\n    --unset-all           remove all matches: name [value-pattern]\n    --rename-section      rename section: old-name new-name\n    --remove-section      remove a section: name\n    -l, --list            list all\n    --fixed-value         use string equality when comparing values to 'value-pattern'\n    -e, --edit            open an editor\n    --get-color           find the color configured: slot [default]\n    --get-colorbool       find the color setting: slot [stdout-is-tty]\n\nType\n    -t, --type &lt;type&gt;     value is given this type\n    --bool                value is \"true\" or \"false\"\n    --int                 value is decimal number\n    --bool-or-int         value is --bool or --int\n    --bool-or-str         value is --bool or string\n    --path                value is a path (file or directory name)\n    --expiry-date         value is an expiry date\n\nOther\n    -z, --null            terminate values with NUL byte\n    --name-only           show variable names only\n    --includes            respect include directives on lookup\n    --show-origin         show origin of config (file, standard input, blob, command line)\n    --show-scope          show scope of config (worktree, local, global, system, command)\n    --default &lt;value&gt;     with --get, use default value when missing entry\n</code></pre>"},{"location":"johdanto/#harjoitus-1","title":"Harjoitus 1","text":"<p>Pannaan ymp\u00e4rist\u00f6 kuntoon harjoituksia varten.</p> <ol> <li>Asenna koneellesi git ja Visual Studio Code (tai vastaava ohjelmointieditori).</li> <li>Konfiguroi Git, ainakin k\u00e4ytt\u00e4j\u00e4tiedot ja editori.</li> <li>Avaa GitHub-palveluun tili.</li> </ol>"},{"location":"kurssi/","title":"Git-versionhallinta -opintojakso","text":"<p>T\u00e4ll\u00e4 opintojaksolla tutustut Git-versionhallintaj\u00e4rjestelm\u00e4n ja GitHub-palvelun k\u00e4ytt\u00e4miseen sek\u00e4 yksitt\u00e4isen ohjelmoijan ett\u00e4 tiimin n\u00e4k\u00f6kulmasta. </p>"},{"location":"kurssi/#osaamistavoitteet","title":"Osaamistavoitteet","text":"<p>Versionhallinta on yksi ohjelmistoty\u00f6n keskeisi\u00e4 ty\u00f6kaluja. Se mahdollistaa ohjelmiston aikaisempien versioiden palauttamisen, ohjelmiston useiden eri versioiden yht\u00e4aikaisen kehitt\u00e4misen ja useiden kehitt\u00e4jien osallistumisen kehitykseen yhtaikaa. </p> <p>Opintojakson suoritettuaan opiskelija</p> <ul> <li>tuntee git-versionhallintaj\u00e4rjestelm\u00e4n perusk\u00e4sitteet</li> <li>osaa k\u00e4ytt\u00e4\u00e4 git-versionhallintaj\u00e4restelm\u00e4n yleisimpi\u00e4 toimintoja</li> <li>osaa k\u00e4ytt\u00e4\u00e4 git-hosting-palveluita</li> <li>osaa soveltaa versiohaaroja omassa ja tiimins\u00e4 kehitysty\u00f6ss\u00e4</li> </ul> <p>Sis\u00e4lt\u00f6</p> <ul> <li>Mit\u00e4 on versionhallinta, mik\u00e4 on git</li> <li>K\u00e4ytt\u00f6\u00f6notto</li> <li>Perusk\u00e4ytt\u00f6</li> <li>Et\u00e4-repositoryjen k\u00e4ytt\u00f6 ja hosting-palvelut</li> <li>Haarat ja niiden k\u00e4ytt\u00f6 projektissa</li> <li>Muita git-toimintoja</li> </ul>"},{"location":"kurssi/#materiaali","title":"Materiaali","text":"<p>Git-versionhallinnasta on paljon ohjeita, tutoriaaleja ja ohjevideoita saatavana verkossa. Kurssimateriaali perustuu pitk\u00e4lti Scott Chaconin ja BenSTraubin kirjaan Pro Git (Chacon, Straub. 2014. Pro Git, 2nd edition. Apress. Berkeley). </p> <p>Kirja on vapaasti saatavana verkosta osoitteesta https://git-scm.com/book/en/v2.</p>"},{"location":"kurssi/#kurssilla-tarvittavat-tyokalut","title":"Kurssilla tarvittavat ty\u00f6kalut","text":"<p>Git-ohjelmisto on oltava asennettuna jokaisella tietokoneella, jolla sit\u00e4 halutaan k\u00e4ytt\u00e4\u00e4. Voit ladata asennuspaketin osoitteesta https://git-scm.com/downloads</p> <p>Kurssin teht\u00e4vien tekemiseen tarvitaan ohjelmointieditori. Editoriksi suositellaan Visual Studio Codea. Sen voit ladata osoitteesta https://code.visualstudio.com/download. Voit halutessasi k\u00e4ytt\u00e4\u00e4 my\u00f6s mit\u00e4 tahansa muuta ohjelmoitieditoria.</p> <p>Kurssilla teht\u00e4v\u00e4t teht\u00e4v\u00e4t talletetaan GitHub-palveluun ja palautetaan sen kautta. Palvelun k\u00e4ytt\u00e4miseksi on luotava palveluun tili. Palvelun k\u00e4ytt\u00e4minen on maksutonta eik\u00e4 rekister\u00f6itymiseen tarvita maksutietoja. Voit rekisterity\u00e4 GitHub palveluun osoitteessa https://github.com/.</p>"},{"location":"kurssi/#kurssin-kaytannot","title":"Kurssin k\u00e4yt\u00e4nn\u00f6t","text":""},{"location":"kurssi/#tehtavat","title":"Teht\u00e4v\u00e4t","text":"<p>Versionhallintaa on vaikea ymm\u00e4rt\u00e4\u00e4 ja oppia lukemalla. T\u00e4ll\u00e4 kurssilla oleellista onkin omakohtainen harjoittelu ja kokeilu. Materiaalissa esitettyj\u00e4 komentoja kannattaakin aina kokeilla itse.</p> <p>Kaikki teht\u00e4v\u00e4t tehd\u00e4\u00e4n Git-versionhallintaa k\u00e4ytt\u00e4en. Kurssin suoritukseen vaadittavat teht\u00e4v\u00e4t on merkitty materiaaliin otsikolla Teht\u00e4v\u00e4. Teht\u00e4v\u00e4t rakentuvat toisilleen, joten ne on teht\u00e4v\u00e4 materiaalin mukaisessa j\u00e4rjestyksess\u00e4.</p>"},{"location":"kurssi/#arviointi","title":"Arviointi","text":"<p>Kurssin arviointi perustuu kurssin harjoitusten tekemisen kautta muodostuneeseen lopputuotokseen ja sen versiohistoriaan. Arvioitavat palautukset tehd\u00e4\u00e4n kurssin Moodle-ty\u00f6tilaan.</p>"},{"location":"muita_toimintoja/","title":"Muita toimintoja","text":""},{"location":"muita_toimintoja/#tiedostojen-jattaminen-versionhallinnan-ulkopuolelle","title":"Tiedostojen j\u00e4tt\u00e4minen versionhallinnan ulkopuolelle","text":"<p>Kaikkia projektin tiedostoja ei kannata vied\u00e4 versionhallintaan.</p> <p>Yleiss\u00e4\u00e4nt\u00f6n\u00e4 pois j\u00e4tet\u00e4\u00e4n </p> <ul> <li>kaikki tiedostot, joita projektissa ei tarvita,  </li> <li>k\u00e4\u00e4nn\u00f6stuotokset ja build-hakemistot,</li> <li>generoidut tiedostot, </li> <li>ty\u00f6kalujen tuottamat loki- ja v\u00e4liaikaistiedostot,</li> <li>pakettienhallinnan lataamat tiedostot ja</li> <li>henkil\u00f6kohtaiset konfiguraatiotiedostot.</li> </ul> <p>Repositorioon pit\u00e4\u00e4 vied\u00e4 kaikki sellaiset tiedostot, joita tarvitaan kehitt\u00e4miseen. Jos uusi kehitt\u00e4j\u00e4 kloonaa repositorion, h\u00e4nen pit\u00e4isi pysty\u00e4 jatkamaan kehityst\u00e4 siit\u00e4.</p>"},{"location":"muita_toimintoja/#luottamuksellinen-tieto","title":"Luottamuksellinen tieto","text":"<p>Versionhallintaan ei pit\u00e4isi vied\u00e4 luottamuksellisia tietoja kuten k\u00e4ytt\u00e4j\u00e4tunnuksia, salasanoja ja j\u00e4rjestelm\u00e4konfiguraatioita. Jos ne ovat versionhallinnassa ja vied\u00e4\u00e4n et\u00e4repositoryyn, ne ovat kaikkien niiden n\u00e4ht\u00e4viss\u00e4, joilla on repositoriaan lukuoikeus.</p> <p>Luottamuksellisia tietoja kuitenkin tarvitaan j\u00e4rjestelmien kehitt\u00e4misess\u00e4 esimerkiksi tietokantayhteyden muodostamiseen. T\u00e4ll\u00f6in on teht\u00e4v\u00e4 jokin ratkaisu, jolla luottamukselliset tiedot tuodaan j\u00e4rjestelm\u00e4\u00e4n jotenkin toisin. </p> <p>Ratkaisu voi olla esim. - Luottamukselliset tiedot ovat konfiguraatiotiedostossa, jota ei vied\u00e4 versionhallintaan - Luottamukselliset tiedot luetaan ymp\u00e4rist\u00f6muuttujista</p> <p>T\u00e4ll\u00f6in kehitt\u00e4j\u00e4 antaa paikallisesti luottamukselliset tiedot.</p>"},{"location":"muita_toimintoja/#ignore-saannot","title":"Ignore-s\u00e4\u00e4nn\u00f6t","text":"<p>Git:lle voi m\u00e4\u00e4ritt\u00e4\u00e4 s\u00e4\u00e4nt\u00f6j\u00e4, mitk\u00e4 tiedostot se j\u00e4tt\u00e4\u00e4 huomioimatta. S\u00e4\u00e4nn\u00f6t m\u00e4\u00e4ritet\u00e4\u00e4n <code>.gitignore</code>-tiedostoon</p> <p>Yleens\u00e4 projektilla on yksi <code>.gitignore</code>-tiedosto projektin juurihakemistossa. Se vaikuttaa siihen hakemistoon, jossa se on sek\u00e4 rekursiivisesti kaikkiin alihakemistoihin.</p>"},{"location":"muita_toimintoja/#esimerkkeja-gitignore-saantojen-laatimisesta","title":"Esimerkkej\u00e4 .gitignore-s\u00e4\u00e4nt\u00f6jen laatimisesta","text":"<p>Kommenttirivit alkavat <code>#</code>-merkill\u00e4. Tyhj\u00e4t rivit j\u00e4tet\u00e4\u00e4n huomiotta. Normaalit korvaus-patternit (esim. <code>*</code>) toimivat. </p> <p>Esimerkkej\u00e4:</p> <pre><code># J\u00e4t\u00e4 huomiotta kaikki tiedostot, jotka p\u00e4\u00e4ttyv\u00e4t tilde-merkkiin (~)\n*~\n\n# J\u00e4t\u00e4 huomiotta kaikki .log-tiedostot\n*.log\n\n# J\u00e4t\u00e4 huomiotta kaikki .o- ja .a-tiedostot\n*.[oa]\n\n# J\u00e4t\u00e4 huomiotta kaikki build-hakemistot miss\u00e4 tahansa hakemistossa\nbuild/\n\n# Jos s\u00e4\u00e4nt\u00f6 alkaa /-merkille, sit\u00e4 ei sovelleta alihakemistoihin:\n# J\u00e4t\u00e4 huomiotta vain t\u00e4ss\u00e4 hakemistossa oleva temp-hakemisto\n/temp\n\n# S\u00e4\u00e4nt\u00f6\u00f6n voi tehd\u00e4 poikkeuksen !-merkill\u00e4:\n# J\u00e4t\u00e4 huomiotta kaikki .log-tiedostot paitsi change.log\n*.log\n!change.log\n</code></pre> <p>GitHubilla on laaja valikoima .gitignore-malleja erilaisille projekteille. Niist\u00e4 saat hyv\u00e4n l\u00e4ht\u00f6kohdan oman projektisi konfigurointiin (https://github.com/github/gitignore).</p>"},{"location":"muita_toimintoja/#huomiotta-jatetyn-tiedoston-poistaminen","title":"Huomiotta j\u00e4tetyn tiedoston poistaminen","text":"<p>Joskus repositorioon lipsahtaa jotain sellaista, jonka ei sinne olisi pit\u00e4nyt menn\u00e4, koska <code>.gitignore</code>-tiedostosta puuttuu s\u00e4\u00e4nt\u00f6, joka olisi pit\u00e4nyt sinne laatia.</p> <p>T\u00e4ll\u00f6in voidaan poistaa tiedosto Git-hallinnasta: <pre><code>git rm --cached tiedostonimi\n</code></pre> Tiedosto merkit\u00e4\u00e4n poistettavaksi hakemistosta seuraavassa commitissa, valitsin <code>--cached</code> kuitenkin s\u00e4ilytt\u00e4\u00e4 sen ty\u00f6tilassa. Tiedosto on nyt ty\u00f6hakemistossasi untracked-tilassa, voit nyt lis\u00e4t\u00e4 .gitignore-s\u00e4\u00e4nn\u00f6n ja tehd\u00e4 commitin, jossa tiedoston poisto talletetaan.</p> <p>Huom! Tiedoston vanhat versiot kuitenkin j\u00e4\u00e4v\u00e4t historiaan. Jos haluat poistaa ne sielt\u00e4kin, on muutettava historiaa, mik\u00e4 on aina riskialtista. Perehdy huolellisesti dokumentaatioon, jos l\u00e4hdet sit\u00e4 tekem\u00e4\u00e4n.</p>"},{"location":"muita_toimintoja/#tarpeettomien-tiedostojen-poistaminen-tyotilasta","title":"Tarpeettomien tiedostojen poistaminen ty\u00f6tilasta","text":"<p>Komento <code>clean</code> poistaa kaikki <code>untracked</code>-tiedostot, joita ei ole erikseen mainittu .gitignoressa. Sill\u00e4 voit puhdistaa ty\u00f6hakemiston turhista tiedostoista, joita ei tarvita repositoryss\u00e4 eik\u00e4 muutenkaan.</p> <p>Koska t\u00e4m\u00e4 komento poistaa tiedostoja, on hyv\u00e4 ensin tarkistaa, mit\u00e4 clean tekisi:</p> <pre><code>git clean \u2013d \u2013-dry-run            # -d poistaa my\u00f6s hakemistot\n</code></pre> <p>Kun olet varma, ett\u00e4 poistettavat tiedostot todella ovat turhia, voit ajaa komennon</p> <pre><code>git clean -d\n</code></pre> <p>Komennolla on my\u00f6s interaktiivinen moodi, jossa aina kysyt\u00e4\u00e4n, mit\u00e4 tehd\u00e4\u00e4n:</p> <pre><code>git clean -i -d\n</code></pre>"},{"location":"muita_toimintoja/#tagit","title":"Tagit","text":"<p>Versiohistoriaan voidaan kirjata muistiin tiettyj\u00e4 nimettyj\u00e4 versioita. T\u00e4llaisia ovat tyypillisesti j\u00e4rjestelm\u00e4n julkaisuversiot (esim v1.0.3).</p> <p>Git-j\u00e4rjestelm\u00e4ss\u00e4 t\u00e4m\u00e4 tehd\u00e4\u00e4n toiminnolla <code>tag</code>. Tagit ovat viittauksia tiettyihin talletuksiin, ja niihin voidaan kirjata metatietoa kuten talletukseen (annotated tag):</p> <pre><code>git tag \u2013a v.1.0.3 \u2013m \"v1.0.3\"   # -a tarkoittaa \"annotated\"\n</code></pre> <p>Tagit voi listata komennolla <code>tag</code>. Tagin tiedot voi listat komennolla <code>show</code>:</p> <pre><code>git tag\ngit show v1.0.3\n</code></pre> <p>Tagin voi asettaa mihin tahansa talletukseen my\u00f6hemminkin:</p> <pre><code>git tag -a v1.2 9fceb02\n</code></pre>"},{"location":"muita_toimintoja/#tagit-etarepositorioissa","title":"Tagit et\u00e4repositorioissa","text":"<p>Tageja ei vied\u00e4 et\u00e4repositoryyn push-operaatiolla automaattisesti vaan ne pit\u00e4\u00e4 vied\u00e4 erikseen. Se tapahtuu samalla tavalla kuin haarojen vienti:</p> <pre><code>git push origin v1.0.3      # \"origin\" on et\u00e4repositorio, \"v1.0.3\" on tag\n</code></pre> <p>Kaikki tagit saa viety\u00e4 kerralla laajentimella <code>--tags</code>:</p> <pre><code>git push origin --tags\n</code></pre> <p>Tagi voidaan poistaa laajentimella <code>-d</code>:</p> <pre><code>git tag -d v1.0.3\n</code></pre> <p>Koska tagit ovat viittauksia talletuksiin siin\u00e4 kuin muutkin viittaukset, niit\u00e4 voi k\u00e4ytt\u00e4\u00e4 samalla tapaa, esim. <pre><code>git checkout v1.2\n</code></pre></p>"},{"location":"peruskaytto/","title":"Perusk\u00e4ytt\u00f6","text":""},{"location":"peruskaytto/#repositorion-perustaminen","title":"Repositorion perustaminen","text":"<p>Voit perustaa repositoryn hakemistoon, joka ei ole viel\u00e4 versionhallinnassa, komennolla <code>init</code>.</p> <pre><code>mkdir demo      # luodaan hakemisto\ncd demo         # vaihdetaan uusi hakemisto oletushakemistoksi\ngit init\n</code></pre> <p>Komento luo tyhj\u00e4n repositoryn, johon voit tallettaa versioita. Tiedot tallentuvat alihakemistoon <code>.git</code>-nimiseen alihakemistoon.  <code>.git</code>-hakemistosta tunnistat, onko hakemisto Git-versionhallinnassa.</p> <p>Tiedostot ja hakemistot, joiden nimi alkaa pisteell\u00e4, ovat piilotettuja, niit\u00e4 ei oletusarvoisesti n\u00e4ytet\u00e4. Saat piilotetut hakemistot n\u00e4kyviin <code>ls</code>-komennon laajentimella <code>-a</code>. Laajentimella `-l`` n\u00e4ytet\u00e4\u00e4n tiedostojen ja hakemistojen kaikki tiedot.</p> <pre><code>$ ls -l -a\ntotal 31\ndrwxr-xr-x 1 h01975 1049089    0 Feb 15 15:04 ./\ndrwxr-xr-x 1 h01975 1049089    0 Feb 22 15:08 ../\ndrwxr-xr-x 1 h01975 1049089    0 Feb 15 15:04 .git/\n-rw-r--r-- 1 h01975 1049089   81 Feb 15 12:36 .gitattributes\ndrwxr-xr-x 1 h01975 1049089    0 Feb 15 12:36 .github/\n-rw-r--r-- 1 h01975 1049089  490 Feb 15 12:36 .gitignore\n-rw-r--r-- 1 h01975 1049089   13 Feb 15 13:42 hello.txt\n-rw-r--r-- 1 h01975 1049089 9305 Feb 15 12:36 readme.md\n-rw-r--r-- 1 h01975 1049089   29 Feb 15 15:04 time.txt\n</code></pre> <p>Jotta piilotetut tiedostot n\u00e4kyisiv\u00e4t Windowsin tiedostojenhallinnassa, on tiedostojenhallinan asetuksissa m\u00e4\u00e4ritett\u00e4v\u00e4 piilotetut tiedostot n\u00e4kyviin.</p> <ul> <li>View hidden files and folders in Windows</li> </ul>"},{"location":"peruskaytto/#repositorion-perustaminen-toisesta-repositoriosta","title":"Repositorion perustaminen toisesta repositoriosta","text":"<p>Usein haluat kopioida olemassa olevan repositoryn ja jatkaa ty\u00f6skentely\u00e4 siit\u00e4. T\u00e4m\u00e4 tapahtuu komennolla clone, esim.</p> <pre><code>git clone https://github.com/libgit2/libgit2\n</code></pre> <p>Komento lis\u00e4\u00e4 nykyiseen hakemistoon alihakemiston libgit2, joka sis\u00e4lt\u00e4\u00e4 alkuper\u00e4isen repositoryn datan kopion (<code>.git</code>) sek\u00e4 uusimman version tiedostot. Se my\u00f6s konfiguroi alkuper\u00e4isen repositoryn uuden repositoryn et\u00e4repositoryksi. </p> <p>T\u00e4s\u00e4 aihetta k\u00e4sitell\u00e4\u00e4n my\u00f6hemmin osiossa Hajautettu Git.</p>"},{"location":"peruskaytto/#tiedostot-git-hakemistossa","title":"Tiedostot Git-hakemistossa","text":"<p>Hakemisto, johon on perustettu Git-repositorio, on Git:n ty\u00f6hakemisto. </p> <p>Ty\u00f6hakemistossa olevat tiedostot ja alihakemistot ovat otettavissa Git-hallintaan. Tiedostot pit\u00e4\u00e4 vied\u00e4 erikseen Git-hallintaan, jos niiden versioita halutaan hallinnoida.</p> <p>Git:n n\u00e4k\u00f6kulmasta hakemistossa olevat tiedostot voivat Git-termein olla joko </p> <ul> <li>Tracked (Otettu Git:n hallintaan) tai </li> <li>Untracked (Ei Git-hallinnassa).</li> </ul> <p>Git:n hallinnassa oleva ty\u00f6hakemiston tiedosto voi olla</p> <ul> <li>Unmodified - muuttumaton sama kuin talletettu uusin versio </li> <li>Modified \u2013 muuttunut, erilainen kuin talletettu uusin versio</li> <li>Staged \u2013 merkitty otettavaksi seuraavaan talletukseen</li> </ul> <p>Oheinen kuva kuvaa eri tiloja ja niiden v\u00e4lisi\u00e4 siirtymi\u00e4.</p> <ul> <li>Jos hakemistoon lis\u00e4t\u00e4\u00e4n uusi tiedosto, se on <code>untracked</code>.</li> <li>Jos hakemistossa oleva Git-hallinnassa oleva tiedosto muuttuu, sen tilaksi tulee <code>modified</code>.</li> <li>Uudet ja muuttuneet tiedostot voidaan merkit\u00e4 otettavaksi seuraavaan talletukseen toiminnolla (Stage the file). </li> <li>Kun talletus  (commit) tehd\u00e4\u00e4n, kaikki mukaan otettavaksi merkityt tiedostoversiot talletetaan, ja niiden tilaksi tulee <code>unmodified</code>.</li> </ul> <p></p> <p>Ty\u00f6hakemiston tiedostojen Git-tilaa voi tarkastella komennolla status.</p> <pre><code>git status\n</code></pre> <p>Vinkki</p> <p>Ty\u00f6hakemiston git-tilaa (komento <code>status</code>) kannattaa tarkastella ennen Git-operaatioita ja niiden j\u00e4lkeen, niin pysyt aina tilanteen tasalla, mit\u00e4 repositoriossasi tapahtuu. </p>"},{"location":"peruskaytto/#muutosten-tallettaminen-vaihe-1-add","title":"Muutosten tallettaminen, vaihe 1: add","text":"<p>Tiedostoversioiden tallettaminen on kaksivaiheinen operaatio. </p> <p>Kun tiedosto on valmis talletettavaksi versionhallintaan, uusi tai muutettu tiedosto on merkitt\u00e4v\u00e4 otettavaksi mukaan seuraavaan talletukseen (commit). T\u00e4t\u00e4 toimintoa kutsutaan Git-terminologiassa nimell\u00e4 staging, ja se tehd\u00e4\u00e4n komennolla <code>add</code>. </p> <p>Tiedostot voidaan lis\u00e4t\u00e4 seuraavaan talletukseen yksitt\u00e4in.</p> <pre><code>git add hello.html   # tiedosto hello.html otetaan mukaan seuraavaan talletukseen\n</code></pre> <p>Voit my\u00f6s lis\u00e4t\u00e4 koko hakemiston, jolloin kaikki hakemiston tiedostot ja alihakemistot sis\u00e4lt\u00f6ineen lis\u00e4t\u00e4\u00e4n kerralla. Hakemistot ovat my\u00f6s tiedostoja, nekin versioituvat.</p> <pre><code>git add .       # . viittaa nykyiseen hakemistoon, kaikki uudet ja muuttuneet tiedostot otetaan mukaan\n</code></pre> <p>Nyt muuttuneet tiedostot ovat valmiita talletettavaksi versionhallintaan. Kuten huomasit, uuden tiedoston tuominen on muutos siin\u00e4 kuin olemassa olevankin muuttaminen.</p> <p>Nyt Git on tietoinen, mit\u00e4 pit\u00e4\u00e4 tallentaa, ja ollaan valmiita <code>commit</code>-toimintoa varten.</p>"},{"location":"peruskaytto/#muutosten-tallettaminen-vaihe-2-commit","title":"Muutosten tallettaminen, vaihe 2: commit","text":"<p>Varsinainen talletus tapahtuu komennolla <code>commit</code>.</p> <pre><code>git commit\n</code></pre> <p>Komento k\u00e4ynnist\u00e4\u00e4 editorin, jolla voit kirjoittaa muutokseen talletettavan kommentin. Kun talletat ja suljet, muutos vied\u00e4\u00e4n tietovarastoon.</p> <p>Kirjaa kommenttiin muutoksen aihe selke\u00e4sti, ne ovat t\u00e4rke\u00e4\u00e4 kommunikaatiota itsellesi ja projektiryhm\u00e4llesi.</p> <p>Voit my\u00f6s kirjata kommentin komentorivill\u00e4 ilman editoria:</p> <pre><code>git commit \u2013m \"Lis\u00e4tty logout-toiminnallisuus\"\n</code></pre>"},{"location":"peruskaytto/#talletusten-tarkastelu","title":"Talletusten tarkastelu","text":"<p>Ty\u00f6tilan muutoksia verrattuna talletettuihin voit tarkastella tutulla komennolla <code>status</code>. Sit\u00e4 kannattaa k\u00e4ytt\u00e4\u00e4 ahkerasti, jotta pysyt selvill\u00e4, mik\u00e4 on hakemiston ja sen muutosten Git-tila:</p> <pre><code>git status\n</code></pre> <p>N\u00e4et commit-talletusten historian komennolla <code>log</code>.</p> <pre><code>git log\n</code></pre> <p>Komento listaa kaikki talletukset k\u00e4\u00e4nteisess\u00e4 aikaj\u00e4rjestyksess\u00e4. Laajentimella <code>--stat</code> Git lis\u00e4\u00e4 tulostukseen lyhyen yhteenvedon talletusten muutoksista:</p> <pre><code>git log --stat\n</code></pre> <p>Ty\u00f6hakemistossa olevan tiedoston muutoksia verrattuna viimeksi talletettuun versioon voi tarkastella komennolla <code>diff</code>.</p> <pre><code>git diff hello.html\n</code></pre>"},{"location":"peruskaytto/#tiedostojen-poistaminen-ja-siirtaminen","title":"Tiedostojen poistaminen ja siirt\u00e4minen","text":"<p>Kuten aiemmin todettiin, hakemistot versioituvat my\u00f6s. Jos haluat poistaa tiedoston repositoriosta tai siirt\u00e4\u00e4 tiedoston toiseen hakemistoon, olet tekem\u00e4ss\u00e4 uutta versiota hakemistoista. </p> <p>Git-komento <code>rm</code> poistaa tiedoston paitsi ty\u00f6hakemistosta my\u00f6s Git-hallinnasta. Muutos on sen lis\u00e4ksi talletettava versionhallintaan.</p> <pre><code>git rm test.txt\ngit commit -m \"Poistettu tarpeeton tiedosto\"\n</code></pre> <p>Huomaa, ett\u00e4 vanhat talletetut versiot s\u00e4ilyv\u00e4t versionhallinnassa! Se, mik\u00e4 on versionhallintaan talletettu, s\u00e4ilyy siell\u00e4.</p> <p>Git-komennolla <code>mv</code> voi nime\u00e4t\u00e4 tiedoston uudelleen tai siirt\u00e4\u00e4 toiseen hakemistoon. </p> <pre><code>git mv oldname.txt newname.txt\nmkdir newdir\ngit mv newname.txt newdir\ngit add .\ngit commit -m \"Uudelleenj\u00e4rjestelty tiedostoja\"\n</code></pre> <p>Tiedostoja voi poistaa ja siirt\u00e4\u00e4 repositorion sis\u00e4ll\u00e4 k\u00e4ytt\u00f6j\u00e4rjestelm\u00e4n komennoilla (esim. <code>rm</code> tai <code>mv</code>). Muutokset talletetaan Git-hallintaan samalla tapaa kuin mik\u00e4 tahansa muutos: ensin <code>add</code>, sitten <code>commit</code>. Vastaavilla Git-komennoilla ei <code>add</code>-vaihetta tarvita.</p>"},{"location":"peruskaytto/#harjoitus-2","title":"Harjoitus 2","text":"<p>Harjoitellaan perustoimintoja. </p> <p>Tarkista repositorion tilanne joka v\u00e4liss\u00e4 komennolla <code>status</code>. Muista laatia talletuksillesi kuvaava kommenttiviesti!</p> <ol> <li>Tee koneellesi kurssin harjoituksia varten hakemisto ja perusta sinne Git-repositorio.</li> <li>Tee repositorioon tiedosto (esim. <code>test.txt</code>) ja kirjoita tiedostoon jotain. Talleta tiedosto Git-hallintaan. </li> <li> <p>Tee repositorioon hakemisto <code>hello</code> ja sinne tiedosto <code>hello.html</code>. Tiedoston sis\u00e4lt\u00f6 voi olla esim.</p> <pre><code>Hei maailma!\n</code></pre> <p>Vie n\u00e4m\u00e4 muutokset Git-hallintaan.</p> </li> <li> <p><code>hello.html</code>-tiedoston sis\u00e4lt\u00f6 ei viel\u00e4 ole HTML-koodia. Lis\u00e4\u00e4 tekstiin h1-merkkaus, jolloin siit\u00e4 tulee HTML-elementti:</p> <pre><code>&lt;h1&gt;Hei maailma!&lt;/h1&gt;\n</code></pre> <p>Vie muutos versionhallintaan. </p> </li> <li> <p>Muuta <code>hello.html</code>-tiedoston nimeksi <code>index.html</code> ja talleta muutos.</p> </li> <li>Ensimm\u00e4isen\u00e4 luotu test.txt-tiedosto on nyt k\u00e4ynyt tarpeettomaksi. Poista se versionhallinnasta ja talleta muutos. Laadi talletuksellesi kuvaava kommenttiviesti.</li> <li>Lis\u00e4\u00e4 viel\u00e4 joitakin tiedostoja ja talleta ne versionhallintaan. </li> <li>Tarkastele tekemi\u00e4si talletuksia komennolla <code>git log</code>. Kokeile my\u00f6s komentoa laajentimella <code>--stat</code>. Mit\u00e4 lis\u00e4tietoa saat?</li> </ol>"},{"location":"peruskaytto/#paluu-menneisyyteen","title":"Paluu menneisyyteen","text":"<p>Johdanto-osiossa v\u00e4itettiin, ett\u00e4 versionhallinnan avulla on mahdollista palauttaa ohjelmiston aiempia versioita. Kokeillaan sit\u00e4 seuraavassa.</p> <p>Tarkastellaan Git-komennon <code>log</code> tulostusta: <pre><code>commit 6fa5fd1b94a163464aaf56a7b69b6f7f4cca429b\nAuthor: Ruonavaara Markku &lt;markku.ruonavaara@haaga-helia.fi&gt;\nDate:   Sun Mar 10 15:16:39 2024 +0200\n\n    Lis\u00e4tty toinen tiedosto\n\ncommit 77d8790ada4aa9ce8e438a360e44657334eeb7d3\nAuthor: Ruonavaara Markku &lt;markku.ruonavaara@haaga-helia.fi&gt;\nDate:   Sun Mar 10 15:14:41 2024 +0200\n\n    Uudelleenj\u00e4rjestelty tiedostoja\n\ncommit 5d565f66349cb8eb1b3550855d89d12496f23a1b\nAuthor: Ruonavaara Markku &lt;markku.ruonavaara@haaga-helia.fi&gt;\nDate:   Sun Mar 10 15:13:46 2024 +0200\n\n    Lis\u00e4tty tiedosto\n\ncommit f78c0a4d638b3c3f3cfb85a2c5e7eba38023d8b3\nAuthor: Ruonavaara Markku &lt;markku.ruonavaara@haaga-helia.fi&gt;\nDate:   Sun Mar 10 14:57:53 2024 +0200\n\n    Ensimm\u00e4inen commit\n</code></pre> Git antaa jokaiselle talletukselle (commit) yksik\u00e4sitteisen tunnistemerkkijonon (esim. 6fa5fd1b94a163464aaf56a7b69b6f7f4cca429b). T\u00e4t\u00e4 tunnistetta kutsutaan Git-terminologiassa nimell\u00e4 hash.</p> <p>Kun tied\u00e4mme tallennuksen tunnisteen, voimme palata sen tilanteeseen komennolla <code>checkout</code>. Palataan ensimm\u00e4isen tallennuksen Ensimm\u00e4inen commit tilanteeseen:  <pre><code>$ git checkout f78c0a4\nNote: switching to 'f78c0a4'.\n\nYou are in 'detached HEAD' state. You can look around, make experimental\nchanges and commit them, and you can discard any commits you make in this\nstate without impacting any branches by switching back to a branch.\n\nIf you want to create a new branch to retain commits you create, you may\ndo so (now or later) by using -c with the switch command. Example:\n\n  git switch -c &lt;new-branch-name&gt;\n\nOr undo this operation with:\n\n  git switch -\n\nTurn off this advice by setting config variable advice.detachedHead to false\n\nHEAD is now at f78c0a4 Ensimm\u00e4inen commit\n</code></pre> Koko tunnistetta ei tarvitse antaa, seitsem\u00e4n ensimm\u00e4ist\u00e4 merkki\u00e4 riitt\u00e4\u00e4.</p> <p>Nyt ty\u00f6hakemisto on p\u00e4ivittynyt ensimm\u00e4isen commit-tallennuksen tilanteeseen, ja hakemistossa on vain sinne ensimm\u00e4isen\u00e4 tehty tiedosto <code>text.txt</code>.</p> <pre><code>$ ls -l -a\ntotal 13\ndrwxr-xr-x 1 h01975 1049089  0 Mar 10 16:17 ./\ndrwxr-xr-x 1 h01975 1049089  0 Mar 10 13:49 ../\ndrwxr-xr-x 1 h01975 1049089  0 Mar 10 16:20 .git/\n-rw-r--r-- 1 h01975 1049089 17 Mar 10 15:00 test.txt\n</code></pre> <p>Komennon ilmoitus kertoo, ett\u00e4 olemme detached HEAD-tilassa. Se tarkoittaa, ett\u00e4 jos teemme muutoksia, ne eiv\u00e4t tule tallettumaan mihink\u00e4\u00e4n haaraan, jolloin ne eiv\u00e4t n\u00e4kyisi versiohistoriassa. K\u00e4yt\u00e4nn\u00f6ss\u00e4 t\u00e4ss\u00e4 tilassa ei kannata tallettaa muutoksia. </p> <p>Takaisin nykytilaan p\u00e4\u00e4st\u00e4\u00e4n esimerkiksi Git:n antaman neuvon mukaisesti:</p> <pre><code>git switch -     # palataan siihen haaraan, josta checkout tehtiin\n</code></pre> <p>Siihen, mist\u00e4 t\u00e4ss\u00e4 on kyse ja miten kannattaa toimia, palataan my\u00f6hemmin osiossa Haarat. </p> <p>Vinkki</p> <p>Git neuvoo sinua aina, kun teet jonkin toimenpiteen. </p> <p>Ilmoituksia kannattaa lukea ja yritt\u00e4\u00e4 tulkita. Ongelmatilanteissa sen ehdotukset usein ohjaavat oikeaan suuntaan.</p>"},{"location":"peruskaytto/#oho-eiku","title":"Oho! Eiku\u2026","text":"<p>Versionhallintatoimintojen kanssa voi helposti tulla erehdyksi\u00e4. H\u00e4t\u00e4 ei kuitenkaan ole t\u00e4m\u00e4nn\u00e4k\u00f6inen, kaikki on oikaistavissa. T\u00e4ss\u00e4 joitakin peruutusohjeita.</p>"},{"location":"peruskaytto/#add-komennon-peruuttaminen","title":"<code>add</code>-komennon peruuttaminen","text":"<p>Jos lis\u00e4sit seuraavaan talletukseen tiedoston, joka ei sinne kuuluisi, voit peruuttaa lis\u00e4yksen komennolla <code>reset</code>.</p> <pre><code>git reset temp.log\n</code></pre> <p>Jos et anna parametria, kaikki lis\u00e4tyt tiedostot poistetaan seuraavasta tallennuksesta.</p> <p>Komento ei poista tai muuta tiedostoja, vain muuttaa tiedostojen tilan talletuksen suhteen.</p>"},{"location":"peruskaytto/#tyotilaan-tehtyjen-muutosten-peruuttaminen-ennen-talletusta","title":"Ty\u00f6tilaan tehtyjen muutosten peruuttaminen ennen talletusta","text":"<p>Jos haluat peruuttaa ty\u00f6tilassa tekem\u00e4si muutokset, joita ei viel\u00e4 ole talletettu versionhallintaan, voit palauttaa tiedoston versionhallinnan tuoreimman version tasalle komennolla <code>restore</code>:</p> <pre><code>git restore hello.html\n</code></pre> <p>Varoitus</p> <p>Huomaa, ett\u00e4 t\u00e4ss\u00e4 tapauksessa tekem\u00e4sti muutokset h\u00e4vi\u00e4v\u00e4t eiv\u00e4tk\u00e4 ne ole palautettavissa. Vain talletetut versiot voidaan palautettaa.</p> <p>Jos haluat peruuttaa kaikki ty\u00f6tilaan tekem\u00e4si muutokset, se onnistuu komennolla <code>git reset --hard</code>. K\u00e4yt\u00e4 sit\u00e4 vain, kun olet varma, ett\u00e4 haluat hyl\u00e4t\u00e4 kaikki tekem\u00e4sti muutoksiet</p>"},{"location":"peruskaytto/#tallennettujen-muutosten-peruminen","title":"Tallennettujen muutosten peruminen","text":"<p>Jos olet tallentanut muutoksen versionhallintaan, muutokselle on jo luotu tunniste ja siit\u00e4 on talletettu kaikki tiedot. Jos sit\u00e4 muutettaisiin, jouduttaisin peukaloimaan repositorion versiohistoriaa.</p> <p>Talletetun muutoksen poistaminen ei oikeastaan edes ole j\u00e4rkev\u00e4\u00e4. Sen sijaan ett\u00e4 yritt\u00e4isit muuttaa historiaa, voit tehd\u00e4 uuden muutoksen, jossa v\u00e4\u00e4r\u00e4 muutos korjataan. </p> <p>Yksi ylim\u00e4\u00e4r\u00e4inen talletus ei haittaa, ja korjaus on t\u00e4ysin riskit\u00f6n. Historian muuttaminen sen sijaan olisi riskialtista, se voisi aiheuttaa monin verroin suurempia ongelmia kuin ylim\u00e4\u00e4r\u00e4inen talletus.</p> <p>Voit peruuttaa kokonaisen talletuksen tekem\u00e4ll\u00e4 \"anti-talletuksen\" Git-komennolla <code>revert</code>. Komento tekee muutoksen, joka peruuttaa sille parametrina annetun talletuksen kokonaan.</p> <p><pre><code>$ git log -2      # n\u00e4ytt\u00e4\u00e4 kaksi viimeisint\u00e4 talletusta\ncommit 4a731586b83b6c1469416a489e5da1a4560707d4 (HEAD -&gt; master)\nAuthor: Ruonavaara Markku &lt;markku.ruonavaara@haaga-helia.fi&gt;\nDate:   Sun Mar 10 16:58:47 2024 +0200\n\n    Lis\u00e4tty log-tiedosto\n\ncommit 21f29c9814e6f101319edc51a199b2d62eb97fae\nAuthor: Ruonavaara Markku &lt;markku.ruonavaara@haaga-helia.fi&gt;\nDate:   Sun Mar 10 15:19:32 2024 +0200\n\n    Siirrelty taas tiedostoja\n\n$ git revert 4a73158\n[master 83e809b] Revert \"Lis\u00e4tty log-tiedosto\"\n 1 file changed, 53 deletions(-)\n delete mode 100644 log.txt\n\n$ git log -2\ncommit 83e809b0dd28076a423d916229567e61f8f44043 (HEAD -&gt; master)\nAuthor: Ruonavaara Markku &lt;markku.ruonavaara@haaga-helia.fi&gt;\nDate:   Sun Mar 10 16:59:26 2024 +0200\n\n    Revert \"Lis\u00e4tty log-tiedosto\"\n\n    This reverts commit 4a731586b83b6c1469416a489e5da1a4560707d4.\n\ncommit 4a731586b83b6c1469416a489e5da1a4560707d4\nAuthor: Ruonavaara Markku &lt;markku.ruonavaara@haaga-helia.fi&gt;\nDate:   Sun Mar 10 16:58:47 2024 +0200\n\n    Lis\u00e4tty log-tiedosto\n</code></pre> Komento <code>revert</code> peruuttaa yhden talletuksen kerrallaan. Jos haluat peruuttaa useampia talletuksia, jokainen pit\u00e4\u00e4 peruuttaa yksi kerrallaan.</p> <p>Muista, ett\u00e4 kaikki, mik\u00e4 on versionhallintaan talletettu, on palautettavissa. Siksi <code>commit</code>-talletuksia kannattaa tehd\u00e4 usein.</p>"},{"location":"peruskaytto/#harjoitus-3","title":"Harjoitus 3","text":"<p>Harjoitellaan peruuttelua.</p> <ol> <li> <p>Tee repositorioosi useita muutoksia: muuta talletettuja tiedostoja ja lis\u00e4\u00e4 uusia tiedostoja.  \u00c4l\u00e4 talleta!</p> </li> <li> <p>Kokeile <code>add</code>-toiminnon peruuttamista. </p> <ul> <li>Lis\u00e4\u00e4 muutokset seuraavaan talletukseen (<code>add</code>).</li> <li>Poista muutoksia yksitt\u00e4in seuraavasta talletuksesta.</li> <li>Poista kaikki loput muutokset seuraavasta talletuksesta. </li> <li>Sinulla pit\u00e4isi nyt olla ty\u00f6tilassa useita tallettamattomia muutoksia, joista mik\u00e4\u00e4n ei ole menossa seuraavaan talletukseen. </li> </ul> </li> <li> <p>Kokeile ty\u00f6tilaan tehtyjen muutosten peruuttamista. Tarkista tilanne joka v\u00e4liss\u00e4 komennolla <code>status</code>.</p> <ul> <li>Peruuta jonkin talletetun tiedoston muutokset ty\u00f6tilasta.</li> <li>Poista kaikki loput muutokset ty\u00f6tilasta. </li> <li>Mit\u00e4 tapahtui uusille untracked-tilassa oleville tiedostoille?</li> </ul> </li> <li> <p>Kokeile talletuksen peruuttamista</p> <ul> <li>Talleta nyt kaikki muutokset. </li> <li>Peruuta talletus komennolla <code>revert</code>. </li> <li>Mit\u00e4 n\u00e4ytt\u00e4\u00e4 komento <code>log</code>?</li> </ul> </li> </ol>"},{"location":"versionhallinta_projektissa/","title":"Git projektissa","text":""},{"location":"versionhallinta_projektissa/#tyonkulut-hajautetussa-git-ymparistossa","title":"Ty\u00f6nkulut hajautetussa Git-ymp\u00e4rist\u00f6ss\u00e4","text":"<p>Git:n k\u00e4ytt\u00f6 perustuu siihen, ett\u00e4 kaikki tapahtuu paikallisessa repositoryss\u00e4. Kun projektissa on useita kehitt\u00e4ji\u00e4, eri kehitt\u00e4jien ty\u00f6 jaetaan toisille et\u00e4repositoryjen avulla.</p> <p>Et\u00e4-repositoryt voidaan organisoida usein eri tavoin, ja niiden k\u00e4ytt\u00f6\u00f6n voidaan laatia erilaisia ty\u00f6nkulkuja. Ty\u00f6nkulku vastaa kysymyksiin - Miten organisoin oman ty\u00f6ni omassa repositoryssani, jotta sen vieminen yhteiseen projektiin onnistuu - Miten vien oman ty\u00f6ni yhteiseen projektiin - Miten saan muiden ty\u00f6t omaan repositoryyni</p> <p>Seuraavassa esitell\u00e4\u00e4n esimerkinomaisesti kaksi erilaista tapaa organisoida versionhallinnan ty\u00f6nkulkuja projektissa.</p>"},{"location":"versionhallinta_projektissa/#keskitetty-malli","title":"Keskitetty malli","text":"<p>Keskitetyss\u00e4 mallissa projektilla on yksi yhteinen repositorio, jonka kanssa kaikki kehitt\u00e4j\u00e4t synkronoivat oman ty\u00f6ns\u00e4. </p> <p></p> <p>L\u00e4hde: Chacon S., Straub B, Pro Git, luku 5. CC BY-NC-SA 3.0</p> <p>Kehitt\u00e4j\u00e4t hakevat muiden muutokset keskitetyst\u00e4 repositoriosta, liitt\u00e4v\u00e4t ne omiin muutoksiinsa, ja viev\u00e4t lopuksi omat muutoksensa yhteiseen repositorioon.</p> <p>Mallin k\u00e4ytt\u00e4minen edellytt\u00e4\u00e4, ett\u00e4 kaikilla projektin kehitt\u00e4jill\u00e4 on oikeudet vied\u00e4 muutoksia yhteiseen repositorioon (push).</p>"},{"location":"versionhallinta_projektissa/#integrointimanagerimalli","title":"Integrointimanagerimalli","text":"<p>Julkisissa projekteissa (esim. avoimen l\u00e4hdekoodin projekteissa) ei ole mahdollista antaa kaikille projektin j\u00e4senille oikeuksia muuttaa yhteisen repositorion sis\u00e4lt\u00f6\u00e4. </p> <p>T\u00e4ll\u00f6in Git-versionhallinnassa voidaan soveltaa mallia, jossa jokaisella kehitt\u00e4jill\u00e4 on oma julkinen repositorio ja lukuoikeudet toistensa repositorioihin.</p> <p>Yksi repositorio on yhteinen \u201dvirallinen\u201d, johon kaikilla on lukuoikeus, mutta jonne vain projektin yll\u00e4pit\u00e4j\u00e4ll\u00e4 (integraatiomanageri) on oikeus vied\u00e4 muutoksia.</p> <p></p> <p>L\u00e4hde: Chacon S., Straub B, Pro Git, luku 5. CC BY-NC-SA 3.0</p> <p>Kukin kehitt\u00e4j\u00e4 julkaisee muutoksensa omaan julkiseen repositorioonsa ja l\u00e4hett\u00e4\u00e4 yll\u00e4pit\u00e4j\u00e4lle pyynn\u00f6n yhdist\u00e4\u00e4 ne viralliseen repositorioon. </p> <p>T\u00e4t\u00e4 ty\u00f6nkulkua t\u00e4ss\u00e4 materiaalissa ei k\u00e4sitell\u00e4 t\u00e4m\u00e4n enemp\u00e4\u00e4.  </p>"},{"location":"versionhallinta_projektissa/#talletusten-kaytannot","title":"Talletusten k\u00e4yt\u00e4nn\u00f6t","text":"<p>Tallennusten kommentit viestitt\u00e4v\u00e4t projektin kehitt\u00e4jille, mit\u00e4 muutoksia toiset ovat projektiin tehneet. Talletusten kommentoinnin k\u00e4yt\u00e4nn\u00f6ist\u00e4 on syyt\u00e4 sopia projektissa yhteisesti.</p> <p>Kommentointiin on vakiintuneita hyvi\u00e4 k\u00e4yt\u00e4nt\u00f6j\u00e4, esim. How to Write a Git Commit Message. Niiden mukaan kommentteihin on hyv\u00e4 kirjata - Lyhyt (max 50 merkki\u00e4), otsikkotyyppinen kuvaus ensimm\u00e4iselle riville. - Tarvittaessa pidempi kuvaus muutoksesta ja se syist\u00e4 rivinvaihdolla erotettuna.</p> <p>Jokaisesta loogisesta kokonaisuudesta kannattaa tehd\u00e4 erillinen talletus. T\u00e4ll\u00f6in muutosten tarkastelu ja k\u00e4sittely projektissa on mahdollisimman selke\u00e4\u00e4. Vaikka olisit kehitt\u00e4nyt useita ominaisuuksia kerralla, voit <code>add</code>-vaiheessa jakaa muutokset eri talletuksiin. </p> <p>Ylim\u00e4\u00e4r\u00e4inen white-space (v\u00e4lily\u00f6nnit, tabulaattorit, rivinvaihdot jne.) ei vaikuta suoritukseen mutta voi n\u00e4ky\u00e4 Git-talletuksissa muille turhina muutoksia. Voit tarkistaa sellaiset <code>diff</code>-komennolla: <pre><code>$ git diff --check\n</code></pre></p> <p>Editoreissa on ominaisuuksia, jolla white-space-ongelmat voidaan poistaa automaattisesti.</p>"},{"location":"versionhallinta_projektissa/#yhteistyo-keskitetyssa-mallissa","title":"Yhteisty\u00f6 keskitetyss\u00e4 mallissa","text":"<p>Yksinkertaisin malli, jota useimmissa pieniss\u00e4 projekteissa k\u00e4ytet\u00e4\u00e4n, on keskitetty. Kaikilla kehitt\u00e4jill\u00e4 on t\u00e4ll\u00f6in kirjoitusoikeudet yhteiseen repositorioon.</p> <p>Aluksi kaikki kloonaavat yhteisen repositoryn</p> <pre><code>$ git clone &lt;repository-url&gt;\n</code></pre> <p>Muutokset tehd\u00e4\u00e4n omassa repositoriossa ja talletetaan sinne, kukin kehitt\u00e4j\u00e4 omaan tahtiinsa.</p> <pre><code>$ git commit\n</code></pre> <p>Kun muutokset ovat valmiita, ne voidaan vied\u00e4 yhteiseen repositorioon </p> <p><pre><code>$ git push origin master\n</code></pre> 1. Tilanne komennon <code>fetch j\u00e4lkeen</code>:</p> <p></p> <ol> <li> <p>Tilanne komennon <code>merge</code> j\u00e4lkeen: </p> </li> <li> <p>Tilanne komennon <code>push</code> j\u00e4lkeen:</p> </li> </ol> <p></p> <p>L\u00e4hde: Chacon S., Straub B, Pro Git, luku 5. CC BY-NC-SA 3.0</p> <p>Lopputilanteessa oma repositorio ja yhteinen repositorio ovat samalla tasalla, ja <code>origin/master</code>-haaran tuoreimmassa talletuksessa on versio, jossa on yhdistetty kaikkien kehitt\u00e4jien t\u00e4h\u00e4nastiset muutokset.  </p>"},{"location":"versionhallinta_projektissa/#rinnakkaiset-muutokset","title":"Rinnakkaiset muutokset","text":"<p>Edell\u00e4 kuvattu onnistuu noin suoraviivaisesti kuitenkin vain, jos kehitt\u00e4j\u00e4t tekev\u00e4t muutokset vuorotellen. </p> <p>Toiset kehitt\u00e4j\u00e4t voivat  olla julkaisseet uusia muutoksia sill\u00e4 aikaa kun kehit\u00e4t omiasi. T\u00e4ll\u00f6in versiopolut erkanevat. </p> <p>Ennen kuin omat muutokset voidaan vied\u00e4 yhteiseen repositorioon, on haettava sielt\u00e4 muiden mahdollisesti tekem\u00e4t uudet muutokset omaan repositorioon. </p> <p>Muiden muutokset on yhdistett\u00e4v\u00e4 omiin muutoksiin ja mahdolliset konfliktit ratkottava. Vasta sitten valmis ja testattu lopputulos voidaan vied\u00e4 yhteiseen repositorioon.</p> <p>Seuraavassa esimerkiss\u00e4 k\u00e4yd\u00e4\u00e4n oman ja muiden kehitt\u00e4jien muutosten yhdist\u00e4minen l\u00e4pi vaihe vaiheelta: </p> <pre><code>$ git fetch origin          # 1, haetaan muiden tekem\u00e4t muutokset\n$ git merge origin/master   # 2. yhdistet\u00e4\u00e4n ne omiin muutoksiin\n# ...ratkotaan mahdolliset konfliktit\n$ git push origin master    # 3. vied\u00e4\u00e4n valmis lopputulos yhteiseen repositorioon\n</code></pre> <p>ToVaiheet 1 ja 2 (<code>fetch</code> ja <code>merge</code>) tehd\u00e4\u00e4n usein kerralla komennolla <code>pull</code>.</p> <p><pre><code>$ git pull origin master\n</code></pre> Huomaa, ett\u00e4 <code>pull</code> voi aiheuttaa konflikteja, sill\u00e4 se tekee my\u00f6s yhdist\u00e4misen. Jos tilanne n\u00e4ytt\u00e4\u00e4 liian sekavalta, keskener\u00e4isen yhdist\u00e4misen voi peruuttaa komennolla <code>git merge --abort</code>. </p>"},{"location":"versionhallinta_projektissa/#yhteenvetoa","title":"Yhteenvetoa","text":"<p>Jokaisesta loogisesta kokonaisuudesta kannattaa tehd\u00e4 erillinen talletus. T\u00e4ll\u00f6in muutosten tarkastelu ja k\u00e4sittely projektissa on mahdollisimman selke\u00e4\u00e4. </p> <p>Talletusten kommentointi on t\u00e4rke\u00e4\u00e4 projketin kehitt\u00e4jien v\u00e4lisen kommunikoinnin kannalta. Noudata hyvi\u00e4 kommentointik\u00e4yt\u00e4nt\u00f6j\u00e4. </p> <p>Seuraava kuva summaa tyypillisen ty\u00f6nkulun projektissa, jossa noudatetaan keskitetty\u00e4 mallia. </p> <p></p> <p>L\u00e4hde: Chacon S., Straub B, Pro Git, luku 5. CC BY-NC-SA 3.0</p> <ul> <li>Alussa kehitt\u00e4j\u00e4t kloonaavat yhteisen repositorion. N\u00e4in he saavat olemassaolevan koodin ty\u00f6tilaansa ja voivat jatkaa kehityst\u00e4.</li> <li>Kukin kehitt\u00e4j\u00e4 tekee oman ty\u00f6ns\u00e4 omassa repositoriossaan.</li> <li>Ennen omien muutosten julkaisemista kunkin kehitt\u00e4j\u00e4n on tuotava omaan repositorioonsa se haara, johon uudet muutokset halutaan vied\u00e4.</li> <li>Et\u00e4repositoriosta saadut muutokset pit\u00e4\u00e4 yhdist\u00e4\u00e4 omiin muutoksiin. Tuloksena saadaan tallennus, jossa on kaikki t\u00e4m\u00e4nhetkiset muutokset.</li> <li>Uusi tallennus vied\u00e4\u00e4n yhteiseen repositorioon, josta muut kehitt\u00e4j\u00e4t puolestaan voivat hakea sen itselleen.</li> </ul>"},{"location":"versionhallinta_projektissa/#harjoitus-6","title":"Harjoitus 6","text":"<p>Harjoitellaan ohjelmiston kehitt\u00e4mist\u00e4 ja muutosten synkronointia verkkopalvelussa sijaitsevan et\u00e4repositorion kanssa. </p> <p>T\u00e4ydennet\u00e4\u00e4n my\u00f6hemmin</p>"}]}